version: '3.7'
services:
 flask_app:
  build: .
  container_name: flask_app
  ports:
   - "5000:5000"
  #expose:
  # - "8000"
  volumes:
   - .:/app
   - ./pre-computed-data:/app/pre-computed-data
   - ./schema_insertion_temp:/app/schema_insertion_temp
   - ./compressed_schemas:/app/compressed_schemas
   - ./prodigal_training_files:/app/prodigal_training_files
   - ./log_files:/app/log_files
  environment:
   - FLASK_ENV=development
   - BASE_URL=https://194.210.120.209/NS/api/
   - DEFAULTHGRAPH=http://localhost:8890/chewiens
   - LOCAL_SPARQL=http://172.19.1.3:8890/sparql
   - URL_SEND_LOCAL_VIRTUOSO=http://172.19.1.3:8890/DAV/test_folder/data
  #  - CELERY_BROKER_URL=redis://172.19.1.4:6379/0
  #  - CELERY_RESULT_BACKEND=redis://172.19.1.4:6379/0
  networks:
    test:
      ipv4_address: 172.19.1.1
  depends_on:
    - redis
    - postgres_compose
    - virtuoso
  #restart: always
 
 postgres_compose:
  image: postgres:10
  container_name: "postgres"
  # Setup the username, password, and database name.
  environment:
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=test
    - POSTGRES_DB=ref_ns_sec
  # Maps port 54320 (localhost) to port 5432 on the container.
  ports:
    - "54320:5432" 
  volumes:
    - ./postgres_data:/var/lib/postgresql/data
  networks: 
    test:
      ipv4_address: 172.19.1.2

 virtuoso:
  image: openlink/virtuoso-opensource-7:7.2
  container_name: virtuoso
  environment:
      #- SPARQL_UPDATE=true
      - VIRTUOSO_DB_USER=demo
      - VIRTUOSO_DB_PASSWORD=chewiens
      - DEFAULT_GRAPH=http://localhost:8890/chewiens
      - DBA_PASSWORD=ummi
      - DAV_PASSWORD=ummi
      #- LOG_FILE_LOCATION=/var/lib/virtuoso-opensource-6.1/db/
      #- VIRTUOSO_INI_FILE=./virtuoso.ini
  volumes:
    # This volume contains the virtuoso database (virtuoso.db)
    - ./virtuoso_data/db:/opt/virtuoso-opensource/database
    
    # This volume contains a file with a SQL query.
    # This query will give permission to perform updates through SPARQL.
    - ./virtuoso_data/sql_query.sql:/opt/virtuoso-opensource/initdb.d/sql_query.sql
  ports:
    - "8890:8890"
    - "1111:1111"
  networks: 
    test:
      ipv4_address: 172.19.1.3
 
 redis:
  image: redis:5.0.6
  container_name: redis
  volumes:
    - ./redis_data:/data
  ports: 
    - "6379:6379"
  networks: 
    test:
      ipv4_address: 172.19.1.4

 celery:
  build: .
  command: celery worker -A app.celery --loglevel=info
  volumes: 
    - .:/app
  depends_on: 
    - redis
  networks: 
    - test

## Production
 nginx_react:
  build:
    context: ./frontend_react/chewie_ns
    dockerfile: Dockerfile.prod
  container_name: nginx
  volumes:
   - ./self_certs:/etc/nginx/certs
   - ./compressed_schemas:/var/www/my-app/compressed_schemas
   - ./prodigal_training_files:/var/www/my-app/prodigal_training_files
   - ./frontend_react/chewie_ns/certs-data/:/data/letsencrypt/
  ports:
   - "443:443"
  depends_on:
   - flask_app
  restart: always
  networks:
    test:
      ipv4_address: 172.19.1.5

networks:
 test:
  ipam: 
    driver: default
    config: 
      - subnet: 172.19.0.0/16

