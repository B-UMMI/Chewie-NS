{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport uniq from 'lodash/uniq';\nimport { CRUD_GET_LIST_SUCCESS, CRUD_CREATE_SUCCESS } from '../../../../actions';\nimport { DELETE, DELETE_MANY } from '../../../../core';\n/**\n * List of the ids of the latest loaded page, regardless of params\n *\n * When loading a the list for the first time, useListController grabs the ids\n * from the cachedRequests reducer (not this ids reducer). It's only when the user\n * changes page, sort, or filter, that the useListController hook uses the ids\n * reducer, so as to show the previous list of results while loading the new\n * list (intead of displaying a blank page each time the list params change).\n *\n * @see useListController\n *\n */\n\nvar idsReducer = function (previousState, action) {\n  if (previousState === void 0) {\n    previousState = [];\n  }\n\n  if (action.meta && action.meta.optimistic) {\n    if (action.meta.fetch === DELETE) {\n      var index = previousState.map(function (el) {\n        return el === action.payload.id;\n      }) // eslint-disable-line eqeqeq\n      .indexOf(true);\n\n      if (index === -1) {\n        return previousState;\n      }\n\n      return __spreadArrays(previousState.slice(0, index), previousState.slice(index + 1));\n    }\n\n    if (action.meta.fetch === DELETE_MANY) {\n      var newState = previousState.filter(function (el) {\n        return !action.payload.ids.includes(el);\n      });\n      return newState;\n    }\n  }\n\n  switch (action.type) {\n    case CRUD_GET_LIST_SUCCESS:\n      return action.payload.data.map(function (_a) {\n        var id = _a.id;\n        return id;\n      });\n\n    case CRUD_CREATE_SUCCESS:\n      return uniq(__spreadArrays([action.payload.data.id], previousState));\n\n    default:\n      return previousState;\n  }\n};\n\nexport default idsReducer;\nexport var getIds = function (state) {\n  return state;\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/reducer/admin/resource/list/ids.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","uniq","CRUD_GET_LIST_SUCCESS","CRUD_CREATE_SUCCESS","DELETE","DELETE_MANY","idsReducer","previousState","action","meta","optimistic","fetch","index","map","el","payload","id","indexOf","slice","newState","filter","ids","includes","type","data","_a","getIds","state"],"mappings":"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","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport uniq from 'lodash/uniq';\nimport { CRUD_GET_LIST_SUCCESS, CRUD_CREATE_SUCCESS, } from '../../../../actions';\nimport { DELETE, DELETE_MANY } from '../../../../core';\n/**\n * List of the ids of the latest loaded page, regardless of params\n *\n * When loading a the list for the first time, useListController grabs the ids\n * from the cachedRequests reducer (not this ids reducer). It's only when the user\n * changes page, sort, or filter, that the useListController hook uses the ids\n * reducer, so as to show the previous list of results while loading the new\n * list (intead of displaying a blank page each time the list params change).\n *\n * @see useListController\n *\n */\nvar idsReducer = function (previousState, action) {\n    if (previousState === void 0) { previousState = []; }\n    if (action.meta && action.meta.optimistic) {\n        if (action.meta.fetch === DELETE) {\n            var index = previousState\n                .map(function (el) { return el === action.payload.id; }) // eslint-disable-line eqeqeq\n                .indexOf(true);\n            if (index === -1) {\n                return previousState;\n            }\n            return __spreadArrays(previousState.slice(0, index), previousState.slice(index + 1));\n        }\n        if (action.meta.fetch === DELETE_MANY) {\n            var newState = previousState.filter(function (el) { return !action.payload.ids.includes(el); });\n            return newState;\n        }\n    }\n    switch (action.type) {\n        case CRUD_GET_LIST_SUCCESS:\n            return action.payload.data.map(function (_a) {\n                var id = _a.id;\n                return id;\n            });\n        case CRUD_CREATE_SUCCESS:\n            return uniq(__spreadArrays([action.payload.data.id], previousState));\n        default:\n            return previousState;\n    }\n};\nexport default idsReducer;\nexport var getIds = function (state) { return state; };\n"]},"metadata":{},"sourceType":"module"}