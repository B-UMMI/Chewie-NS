{"ast":null,"code":"import * as React from 'react';\nimport { useContext } from 'react';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { createHashHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport { DataProviderContext, convertLegacyDataProvider } from '../dataProvider';\nimport createAdminStore from './createAdminStore';\nimport TranslationProvider from '../i18n/TranslationProvider';\n\nvar CoreAdminContext = function (_a) {\n  var authProvider = _a.authProvider,\n      dataProvider = _a.dataProvider,\n      i18nProvider = _a.i18nProvider,\n      children = _a.children,\n      history = _a.history,\n      customReducers = _a.customReducers,\n      customSagas = _a.customSagas,\n      initialState = _a.initialState;\n  var reduxIsAlreadyInitialized = !!useContext(ReactReduxContext);\n\n  if (!dataProvider) {\n    throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n  }\n\n  var finalAuthProvider = authProvider instanceof Function ? convertLegacyAuthProvider(authProvider) : authProvider;\n  var finalDataProvider = dataProvider instanceof Function ? convertLegacyDataProvider(dataProvider) : dataProvider;\n  var finalHistory = history || createHashHistory();\n\n  var renderCore = function () {\n    return React.createElement(AuthContext.Provider, {\n      value: finalAuthProvider\n    }, React.createElement(DataProviderContext.Provider, {\n      value: finalDataProvider\n    }, React.createElement(TranslationProvider, {\n      i18nProvider: i18nProvider\n    }, typeof window !== 'undefined' ? React.createElement(ConnectedRouter, {\n      history: finalHistory\n    }, children) : children)));\n  };\n\n  if (reduxIsAlreadyInitialized) {\n    if (!history) {\n      throw new Error(\"Missing history prop.\\nWhen integrating react-admin inside an existing redux Provider, you must provide the same 'history' prop to the <Admin> as the one used to bootstrap your routerMiddleware.\\nReact-admin uses this history for its own ConnectedRouter.\");\n    }\n\n    return renderCore();\n  } else {\n    return React.createElement(Provider, {\n      store: createAdminStore({\n        authProvider: finalAuthProvider,\n        customReducers: customReducers,\n        customSagas: customSagas,\n        dataProvider: finalDataProvider,\n        initialState: initialState,\n        history: finalHistory\n      })\n    }, renderCore());\n  }\n};\n\nexport default CoreAdminContext;","map":{"version":3,"sources":["/node_modules/ra-core/esm/core/CoreAdminContext.js"],"names":["React","useContext","Provider","ReactReduxContext","createHashHistory","ConnectedRouter","AuthContext","convertLegacyAuthProvider","DataProviderContext","convertLegacyDataProvider","createAdminStore","TranslationProvider","CoreAdminContext","_a","authProvider","dataProvider","i18nProvider","children","history","customReducers","customSagas","initialState","reduxIsAlreadyInitialized","Error","finalAuthProvider","Function","finalDataProvider","finalHistory","renderCore","createElement","value","window","store"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,aAA5C;AACA,SAASC,iBAAT,QAAkC,SAAlC;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,WAAT,EAAsBC,yBAAtB,QAAuD,SAAvD;AACA,SAASC,mBAAT,EAA8BC,yBAA9B,QAAgE,iBAAhE;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,mBAAP,MAAgC,6BAAhC;;AACA,IAAIC,gBAAgB,GAAG,UAAUC,EAAV,EAAc;AACjC,MAAIC,YAAY,GAAGD,EAAE,CAACC,YAAtB;AAAA,MAAoCC,YAAY,GAAGF,EAAE,CAACE,YAAtD;AAAA,MAAoEC,YAAY,GAAGH,EAAE,CAACG,YAAtF;AAAA,MAAoGC,QAAQ,GAAGJ,EAAE,CAACI,QAAlH;AAAA,MAA4HC,OAAO,GAAGL,EAAE,CAACK,OAAzI;AAAA,MAAkJC,cAAc,GAAGN,EAAE,CAACM,cAAtK;AAAA,MAAsLC,WAAW,GAAGP,EAAE,CAACO,WAAvM;AAAA,MAAoNC,YAAY,GAAGR,EAAE,CAACQ,YAAtO;AACA,MAAIC,yBAAyB,GAAG,CAAC,CAACrB,UAAU,CAACE,iBAAD,CAA5C;;AACA,MAAI,CAACY,YAAL,EAAmB;AACf,UAAM,IAAIQ,KAAJ,CAAU,yFAAV,CAAN;AACH;;AACD,MAAIC,iBAAiB,GAAGV,YAAY,YAAYW,QAAxB,GAClBlB,yBAAyB,CAACO,YAAD,CADP,GAElBA,YAFN;AAGA,MAAIY,iBAAiB,GAAGX,YAAY,YAAYU,QAAxB,GAClBhB,yBAAyB,CAACM,YAAD,CADP,GAElBA,YAFN;AAGA,MAAIY,YAAY,GAAGT,OAAO,IAAId,iBAAiB,EAA/C;;AACA,MAAIwB,UAAU,GAAG,YAAY;AACzB,WAAQ5B,KAAK,CAAC6B,aAAN,CAAoBvB,WAAW,CAACJ,QAAhC,EAA0C;AAAE4B,MAAAA,KAAK,EAAEN;AAAT,KAA1C,EACJxB,KAAK,CAAC6B,aAAN,CAAoBrB,mBAAmB,CAACN,QAAxC,EAAkD;AAAE4B,MAAAA,KAAK,EAAEJ;AAAT,KAAlD,EACI1B,KAAK,CAAC6B,aAAN,CAAoBlB,mBAApB,EAAyC;AAAEK,MAAAA,YAAY,EAAEA;AAAhB,KAAzC,EAAyE,OAAOe,MAAP,KAAkB,WAAlB,GAAiC/B,KAAK,CAAC6B,aAAN,CAAoBxB,eAApB,EAAqC;AAAEa,MAAAA,OAAO,EAAES;AAAX,KAArC,EAAgEV,QAAhE,CAAjC,GAA+GA,QAAxL,CADJ,CADI,CAAR;AAGH,GAJD;;AAKA,MAAIK,yBAAJ,EAA+B;AAC3B,QAAI,CAACJ,OAAL,EAAc;AACV,YAAM,IAAIK,KAAJ,CAAU,gQAAV,CAAN;AACH;;AACD,WAAOK,UAAU,EAAjB;AACH,GALD,MAMK;AACD,WAAQ5B,KAAK,CAAC6B,aAAN,CAAoB3B,QAApB,EAA8B;AAAE8B,MAAAA,KAAK,EAAEtB,gBAAgB,CAAC;AACxDI,QAAAA,YAAY,EAAEU,iBAD0C;AAExDL,QAAAA,cAAc,EAAEA,cAFwC;AAGxDC,QAAAA,WAAW,EAAEA,WAH2C;AAIxDL,QAAAA,YAAY,EAAEW,iBAJ0C;AAKxDL,QAAAA,YAAY,EAAEA,YAL0C;AAMxDH,QAAAA,OAAO,EAAES;AAN+C,OAAD;AAAzB,KAA9B,EAOEC,UAAU,EAPZ,CAAR;AAQH;AACJ,CAlCD;;AAmCA,eAAehB,gBAAf","sourcesContent":["import * as React from 'react';\nimport { useContext } from 'react';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport { createHashHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport { DataProviderContext, convertLegacyDataProvider, } from '../dataProvider';\nimport createAdminStore from './createAdminStore';\nimport TranslationProvider from '../i18n/TranslationProvider';\nvar CoreAdminContext = function (_a) {\n    var authProvider = _a.authProvider, dataProvider = _a.dataProvider, i18nProvider = _a.i18nProvider, children = _a.children, history = _a.history, customReducers = _a.customReducers, customSagas = _a.customSagas, initialState = _a.initialState;\n    var reduxIsAlreadyInitialized = !!useContext(ReactReduxContext);\n    if (!dataProvider) {\n        throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n    }\n    var finalAuthProvider = authProvider instanceof Function\n        ? convertLegacyAuthProvider(authProvider)\n        : authProvider;\n    var finalDataProvider = dataProvider instanceof Function\n        ? convertLegacyDataProvider(dataProvider)\n        : dataProvider;\n    var finalHistory = history || createHashHistory();\n    var renderCore = function () {\n        return (React.createElement(AuthContext.Provider, { value: finalAuthProvider },\n            React.createElement(DataProviderContext.Provider, { value: finalDataProvider },\n                React.createElement(TranslationProvider, { i18nProvider: i18nProvider }, typeof window !== 'undefined' ? (React.createElement(ConnectedRouter, { history: finalHistory }, children)) : (children)))));\n    };\n    if (reduxIsAlreadyInitialized) {\n        if (!history) {\n            throw new Error(\"Missing history prop.\\nWhen integrating react-admin inside an existing redux Provider, you must provide the same 'history' prop to the <Admin> as the one used to bootstrap your routerMiddleware.\\nReact-admin uses this history for its own ConnectedRouter.\");\n        }\n        return renderCore();\n    }\n    else {\n        return (React.createElement(Provider, { store: createAdminStore({\n                authProvider: finalAuthProvider,\n                customReducers: customReducers,\n                customSagas: customSagas,\n                dataProvider: finalDataProvider,\n                initialState: initialState,\n                history: finalHistory,\n            }) }, renderCore()));\n    }\n};\nexport default CoreAdminContext;\n"]},"metadata":{},"sourceType":"module"}