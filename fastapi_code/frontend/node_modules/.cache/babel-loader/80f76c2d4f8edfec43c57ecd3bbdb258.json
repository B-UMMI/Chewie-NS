{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport useNotify from '../sideEffect/useNotify';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useAuthCheck.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\n\nvar useCheckAuth = function () {\n  var authProvider = useAuthProvider();\n  var notify = useNotify();\n  var logout = useLogout();\n  var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (logoutOnFailure === void 0) {\n      logoutOnFailure = true;\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n\n    return authProvider.checkAuth(params).catch(function (error) {\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo ? error.redirectTo : redirectTo);\n        notify(getErrorMessage(error, 'ra.auth.auth_check_error'), 'warning');\n      }\n\n      throw error;\n    });\n  }, [authProvider, logout, notify]);\n  return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\n\nvar checkAuthWithoutAuthProvider = function () {\n  return Promise.resolve();\n};\n\nvar getErrorMessage = function (error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};\n\nexport default useCheckAuth;","map":{"version":3,"sources":["/node_modules/ra-core/esm/auth/useCheckAuth.js"],"names":["useCallback","useAuthProvider","defaultAuthParams","useLogout","useNotify","useCheckAuth","authProvider","notify","logout","checkAuth","params","logoutOnFailure","redirectTo","loginUrl","catch","error","getErrorMessage","checkAuthWithoutAuthProvider","Promise","resolve","defaultMessage","message"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAIC,YAAY,GAAG,YAAY;AAC3B,MAAIC,YAAY,GAAGL,eAAe,EAAlC;AACA,MAAIM,MAAM,GAAGH,SAAS,EAAtB;AACA,MAAII,MAAM,GAAGL,SAAS,EAAtB;AACA,MAAIM,SAAS,GAAGT,WAAW,CAAC,UAAUU,MAAV,EAAkBC,eAAlB,EAAmCC,UAAnC,EAA+C;AACvE,QAAIF,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,QAAIC,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,MAAAA,eAAe,GAAG,IAAlB;AAAyB;;AAC3D,QAAIC,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAGV,iBAAiB,CAACW,QAA/B;AAA0C;;AACvE,WAAOP,YAAY,CAACG,SAAb,CAAuBC,MAAvB,EAA+BI,KAA/B,CAAqC,UAAUC,KAAV,EAAiB;AACzD,UAAIJ,eAAJ,EAAqB;AACjBH,QAAAA,MAAM,CAAC,EAAD,EAAKO,KAAK,IAAIA,KAAK,CAACH,UAAf,GACLG,KAAK,CAACH,UADD,GAELA,UAFA,CAAN;AAGAL,QAAAA,MAAM,CAACS,eAAe,CAACD,KAAD,EAAQ,0BAAR,CAAhB,EAAqD,SAArD,CAAN;AACH;;AACD,YAAMA,KAAN;AACH,KARM,CAAP;AASH,GAb0B,EAaxB,CAACT,YAAD,EAAeE,MAAf,EAAuBD,MAAvB,CAbwB,CAA3B;AAcA,SAAOD,YAAY,GAAGG,SAAH,GAAeQ,4BAAlC;AACH,CAnBD;;AAoBA,IAAIA,4BAA4B,GAAG,YAAY;AAAE,SAAOC,OAAO,CAACC,OAAR,EAAP;AAA2B,CAA5E;;AACA,IAAIH,eAAe,GAAG,UAAUD,KAAV,EAAiBK,cAAjB,EAAiC;AACnD,SAAO,OAAOL,KAAP,KAAiB,QAAjB,GACDA,KADC,GAED,OAAOA,KAAP,KAAiB,WAAjB,IAAgC,CAACA,KAAK,CAACM,OAAvC,GACID,cADJ,GAEIL,KAAK,CAACM,OAJhB;AAKH,CAND;;AAOA,eAAehB,YAAf","sourcesContent":["import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport useNotify from '../sideEffect/useNotify';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useAuthCheck.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nvar useCheckAuth = function () {\n    var authProvider = useAuthProvider();\n    var notify = useNotify();\n    var logout = useLogout();\n    var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo) {\n        if (params === void 0) { params = {}; }\n        if (logoutOnFailure === void 0) { logoutOnFailure = true; }\n        if (redirectTo === void 0) { redirectTo = defaultAuthParams.loginUrl; }\n        return authProvider.checkAuth(params).catch(function (error) {\n            if (logoutOnFailure) {\n                logout({}, error && error.redirectTo\n                    ? error.redirectTo\n                    : redirectTo);\n                notify(getErrorMessage(error, 'ra.auth.auth_check_error'), 'warning');\n            }\n            throw error;\n        });\n    }, [authProvider, logout, notify]);\n    return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\nvar checkAuthWithoutAuthProvider = function () { return Promise.resolve(); };\nvar getErrorMessage = function (error, defaultMessage) {\n    return typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n            ? defaultMessage\n            : error.message;\n};\nexport default useCheckAuth;\n"]},"metadata":{},"sourceType":"module"}