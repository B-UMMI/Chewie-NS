{"ast":null,"code":"import * as React from 'react';\nimport ListContext from './ListContext';\nimport ListFilterContext, { usePickFilterContext } from './ListFilterContext';\nimport ListSortContext, { usePickSortContext } from './ListSortContext';\nimport ListPaginationContext, { usePickPaginationContext } from './ListPaginationContext';\n/**\n * Create a List Context and several thematic List subcontext.\n *\n * Allows children to subscribe to part of the ListContext, and bail out of\n * rendering when some parts of the context that they don't depend on change\n * (because unfortunately React doesn't allow to use context selectors yet).\n *\n * @example\n *\n * const MyList = (props) => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContextProvider value={controllerProps}>\n *             <MyListView>\n *         </ListContextProvider>\n *     );\n * };\n *\n * const MyListView = () => {\n *     const { data, ids, filterValues, setFilters } = useListContext();\n *     // or, to rerender only when filters change but not data\n *     const { filterValues, setFilters } = useListFilterContext();\n * }\n *\n * @see ListContext\n * @see ListFilterContext\n */\n\nvar ListContextProvider = function (_a) {\n  var value = _a.value,\n      children = _a.children;\n  return React.createElement(ListContext.Provider, {\n    value: value\n  }, React.createElement(ListFilterContext.Provider, {\n    value: usePickFilterContext(value)\n  }, React.createElement(ListSortContext.Provider, {\n    value: usePickSortContext(value)\n  }, React.createElement(ListPaginationContext.Provider, {\n    value: usePickPaginationContext(value)\n  }, children))));\n};\n\nexport default ListContextProvider;","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/ListContextProvider.js"],"names":["React","ListContext","ListFilterContext","usePickFilterContext","ListSortContext","usePickSortContext","ListPaginationContext","usePickPaginationContext","ListContextProvider","_a","value","children","createElement","Provider"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,iBAAP,IAA4BC,oBAA5B,QAAwD,qBAAxD;AACA,OAAOC,eAAP,IAA0BC,kBAA1B,QAAoD,mBAApD;AACA,OAAOC,qBAAP,IAAgCC,wBAAhC,QAAiE,yBAAjE;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIC,mBAAmB,GAAG,UAAUC,EAAV,EAAc;AACpC,MAAIC,KAAK,GAAGD,EAAE,CAACC,KAAf;AAAA,MAAsBC,QAAQ,GAAGF,EAAE,CAACE,QAApC;AACA,SAAQX,KAAK,CAACY,aAAN,CAAoBX,WAAW,CAACY,QAAhC,EAA0C;AAAEH,IAAAA,KAAK,EAAEA;AAAT,GAA1C,EACJV,KAAK,CAACY,aAAN,CAAoBV,iBAAiB,CAACW,QAAtC,EAAgD;AAAEH,IAAAA,KAAK,EAAEP,oBAAoB,CAACO,KAAD;AAA7B,GAAhD,EACIV,KAAK,CAACY,aAAN,CAAoBR,eAAe,CAACS,QAApC,EAA8C;AAAEH,IAAAA,KAAK,EAAEL,kBAAkB,CAACK,KAAD;AAA3B,GAA9C,EACIV,KAAK,CAACY,aAAN,CAAoBN,qBAAqB,CAACO,QAA1C,EAAoD;AAAEH,IAAAA,KAAK,EAAEH,wBAAwB,CAACG,KAAD;AAAjC,GAApD,EAAgGC,QAAhG,CADJ,CADJ,CADI,CAAR;AAIH,CAND;;AAOA,eAAeH,mBAAf","sourcesContent":["import * as React from 'react';\nimport ListContext from './ListContext';\nimport ListFilterContext, { usePickFilterContext } from './ListFilterContext';\nimport ListSortContext, { usePickSortContext } from './ListSortContext';\nimport ListPaginationContext, { usePickPaginationContext, } from './ListPaginationContext';\n/**\n * Create a List Context and several thematic List subcontext.\n *\n * Allows children to subscribe to part of the ListContext, and bail out of\n * rendering when some parts of the context that they don't depend on change\n * (because unfortunately React doesn't allow to use context selectors yet).\n *\n * @example\n *\n * const MyList = (props) => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContextProvider value={controllerProps}>\n *             <MyListView>\n *         </ListContextProvider>\n *     );\n * };\n *\n * const MyListView = () => {\n *     const { data, ids, filterValues, setFilters } = useListContext();\n *     // or, to rerender only when filters change but not data\n *     const { filterValues, setFilters } = useListFilterContext();\n * }\n *\n * @see ListContext\n * @see ListFilterContext\n */\nvar ListContextProvider = function (_a) {\n    var value = _a.value, children = _a.children;\n    return (React.createElement(ListContext.Provider, { value: value },\n        React.createElement(ListFilterContext.Provider, { value: usePickFilterContext(value) },\n            React.createElement(ListSortContext.Provider, { value: usePickSortContext(value) },\n                React.createElement(ListPaginationContext.Provider, { value: usePickPaginationContext(value) }, children)))));\n};\nexport default ListContextProvider;\n"]},"metadata":{},"sourceType":"module"}