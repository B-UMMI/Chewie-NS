{"ast":null,"code":"/* jshint node:true */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar EOL = require('../core/eol');\n\nvar joinRows = require('../core/join-rows');\n\nvar Handler = require('./handler');\n\nvar helper = require('../core/helper');\n\nvar Parser = function () {\n  function Parser(options) {\n    _classCallCheck(this, Parser);\n\n    this._options = this._parseOptions(options) || {};\n    this._handler = new Handler(this._options);\n    this._headers = this._options.headers || [];\n    this._escape = require('../core/escape-delimiters')(this._options.textDelimiter, this._options.rowDelimiter, this._options.forceTextDelimiter);\n  }\n  /**\n   * Generates a CSV file with optional headers based on the passed JSON,\n   * with can be an Object or Array.\n   *\n   * @param {Object|Array} json\n   * @param {Function} done(err,csv) - Callback function\n   *      if error, returning error in call back.\n   *      if csv is created successfully, returning csv output to callback.\n   */\n\n\n  _createClass(Parser, [{\n    key: 'parse',\n    value: function parse(json, done, stream) {\n      if (helper.isArray(json)) return done(null, this._parseArray(json, stream));else if (helper.isObject(json)) return done(null, this._parseObject(json));\n      return done(new Error('Unable to parse the JSON object, its not an Array or Object.'));\n    }\n  }, {\n    key: '_checkRows',\n    value: function _checkRows(rows) {\n      var lastRow = null;\n      var finalRows = [];\n\n      var fillGaps = function fillGaps(col, index) {\n        return col === '' || col === undefined ? lastRow[index] : col;\n      };\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var row = _step.value;\n          var missing = this._headers.length - row.length;\n          if (missing > 0) row = row.concat(Array(missing).join(\".\").split(\".\"));\n          if (lastRow && this._options.fillGaps) row = row.map(fillGaps);\n          finalRows.push(row.join(this._options.rowDelimiter));\n          lastRow = row;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return finalRows;\n    }\n  }, {\n    key: '_parseArray',\n    value: function _parseArray(json, stream) {\n      var self = this;\n      this._headers = this._headers || [];\n      var fileRows = [];\n      var outputFile = void 0;\n      var fillRows = void 0;\n\n      var getHeaderIndex = function getHeaderIndex(header) {\n        var index = self._headers.indexOf(header);\n\n        if (index === -1) {\n          self._headers.push(header);\n\n          index = self._headers.indexOf(header);\n        }\n\n        return index;\n      }; //Generate the csv output\n\n\n      fillRows = function fillRows(result) {\n        var rows = [];\n\n        var fillAndPush = function fillAndPush(row) {\n          return rows.push(row.map(function (col) {\n            return col || '';\n          }));\n        }; // initialize the array with empty strings to handle 'unpopular' headers\n\n\n        var newRow = function newRow() {\n          return new Array(self._headers.length).fill(null);\n        };\n\n        var emptyRowIndexByHeader = {};\n        var currentRow = newRow();\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = result[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var element = _step2.value;\n            var elementHeaderIndex = getHeaderIndex(element.item);\n\n            if (currentRow[elementHeaderIndex] != undefined) {\n              fillAndPush(currentRow);\n              currentRow = newRow();\n            }\n\n            emptyRowIndexByHeader[elementHeaderIndex] = emptyRowIndexByHeader[elementHeaderIndex] || 0; // make sure there isnt a empty row for this header\n\n            if (emptyRowIndexByHeader[elementHeaderIndex] < rows.length) {\n              rows[emptyRowIndexByHeader[elementHeaderIndex]][elementHeaderIndex] = self._escape(element.value);\n              emptyRowIndexByHeader[elementHeaderIndex] += 1;\n              continue;\n            }\n\n            currentRow[elementHeaderIndex] = self._escape(element.value);\n            emptyRowIndexByHeader[elementHeaderIndex] += 1;\n          } // push last row\n\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (currentRow.length > 0) {\n          fillAndPush(currentRow);\n        }\n\n        fileRows = fileRows.concat(self._checkRows(rows));\n      };\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = json[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value; //Call checkType to list all items inside this object\n          //Items are returned as a object {item: 'Prop Value, Item Name', value: 'Prop Data Value'}\n\n          var itemResult = self._handler.check(item, self._options.mainPathItem, item, json);\n\n          fillRows(itemResult);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (!stream && self._options.includeHeaders) {\n        //Add the headers to the first line\n        fileRows.unshift(this.headers);\n      }\n\n      return joinRows(fileRows, self._options.endOfLine);\n    }\n  }, {\n    key: '_parseObject',\n    value: function _parseObject(json) {\n      var self = this;\n      var fileRows = [];\n      var parseResult = [];\n      var outputFile = void 0;\n      var fillRows = void 0;\n      var horizontalRows = [[], []];\n\n      fillRows = function fillRows(result) {\n        var value = result.value ? result.value.toString() : self._options.undefinedString;\n        value = self._escape(value); //Type header;value\n\n        if (self._options.verticalOutput) {\n          var row = [result.item, value];\n          fileRows.push(row.join(self._options.rowDelimiter));\n        } else {\n          horizontalRows[0].push(result.item);\n          horizontalRows[1].push(value);\n        }\n      };\n\n      for (var prop in json) {\n        var prefix = \"\";\n        if (this._options.mainPathItem) prefix = this._options.mainPathItem + this._options.headerPathString;\n        parseResult = this._handler.check(json[prop], prefix + prop, prop, json);\n        parseResult.forEach(fillRows);\n      }\n\n      if (!this._options.verticalOutput) {\n        fileRows.push(horizontalRows[0].join(this._options.rowDelimiter));\n        fileRows.push(horizontalRows[1].join(this._options.rowDelimiter));\n      }\n\n      return joinRows(fileRows, this._options.endOfLine);\n    }\n    /**\n     * Replaces the default options with the custom user options\n     *\n     * @param {Options} userOptions\n     */\n\n  }, {\n    key: '_parseOptions',\n    value: function _parseOptions(userOptions) {\n      var defaultOptions = {\n        headers: [],\n        //              Array\n        rename: [],\n        //               Array\n        headerPathString: '.',\n        //    String\n        rowDelimiter: ',',\n        //        String\n        textDelimiter: '\"',\n        //       String\n        arrayPathString: ';',\n        //     String\n        undefinedString: '',\n        //      String\n        endOfLine: EOL || '\\n',\n        //   String\n        mainPathItem: null,\n        //       String\n        booleanTrueString: null,\n        //  String\n        booleanFalseString: null,\n        // String\n        includeHeaders: true,\n        //     Boolean\n        fillGaps: false,\n        //          Boolean\n        verticalOutput: true,\n        //     Boolean\n        forceTextDelimiter: false,\n        //Boolean\n        //Handlers\n        handleString: undefined,\n        //  Function\n        handleNumber: undefined,\n        //  Function\n        handleBoolean: undefined,\n        // Function\n        handleDate: undefined //    Function\n\n      };\n      return Object.assign({}, defaultOptions, userOptions);\n    }\n  }, {\n    key: 'headers',\n    get: function get() {\n      var _this = this;\n\n      var headers = this._headers;\n      if (this._options.rename && this._options.rename.length > 0) headers = headers.map(function (header) {\n        return _this._options.rename[_this._options.headers.indexOf(header)] || header;\n      });\n\n      if (this._options.forceTextDelimiter) {\n        headers = headers.map(function (header) {\n          return '' + _this._options.textDelimiter + header + _this._options.textDelimiter;\n        });\n      }\n\n      if (this._options.mapHeaders) headers = headers.map(this._options.mapHeaders);\n      return headers.join(this._options.rowDelimiter);\n    }\n  }]);\n\n  return Parser;\n}();\n\nmodule.exports = Parser;","map":{"version":3,"sources":["/node_modules/jsonexport/dist/parser/csv.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","EOL","require","joinRows","Handler","helper","Parser","options","_options","_parseOptions","_handler","_headers","headers","_escape","textDelimiter","rowDelimiter","forceTextDelimiter","value","parse","json","done","stream","isArray","_parseArray","isObject","_parseObject","Error","_checkRows","rows","lastRow","finalRows","fillGaps","col","index","undefined","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","row","missing","concat","Array","join","split","map","push","err","return","self","fileRows","outputFile","fillRows","getHeaderIndex","header","indexOf","result","fillAndPush","newRow","fill","emptyRowIndexByHeader","currentRow","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","element","elementHeaderIndex","item","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","itemResult","check","mainPathItem","includeHeaders","unshift","endOfLine","parseResult","horizontalRows","toString","undefinedString","verticalOutput","prop","prefix","headerPathString","forEach","userOptions","defaultOptions","rename","arrayPathString","booleanTrueString","booleanFalseString","handleString","handleNumber","handleBoolean","handleDate","assign","get","_this","mapHeaders","module","exports"],"mappings":"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","sourcesContent":["/* jshint node:true */\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EOL = require('../core/eol');\nvar joinRows = require('../core/join-rows');\nvar Handler = require('./handler');\nvar helper = require('../core/helper');\n\nvar Parser = function () {\n  function Parser(options) {\n    _classCallCheck(this, Parser);\n\n    this._options = this._parseOptions(options) || {};\n    this._handler = new Handler(this._options);\n    this._headers = this._options.headers || [];\n    this._escape = require('../core/escape-delimiters')(this._options.textDelimiter, this._options.rowDelimiter, this._options.forceTextDelimiter);\n  }\n\n  /**\n   * Generates a CSV file with optional headers based on the passed JSON,\n   * with can be an Object or Array.\n   *\n   * @param {Object|Array} json\n   * @param {Function} done(err,csv) - Callback function\n   *      if error, returning error in call back.\n   *      if csv is created successfully, returning csv output to callback.\n   */\n\n\n  _createClass(Parser, [{\n    key: 'parse',\n    value: function parse(json, done, stream) {\n      if (helper.isArray(json)) return done(null, this._parseArray(json, stream));else if (helper.isObject(json)) return done(null, this._parseObject(json));\n      return done(new Error('Unable to parse the JSON object, its not an Array or Object.'));\n    }\n  }, {\n    key: '_checkRows',\n    value: function _checkRows(rows) {\n      var lastRow = null;\n      var finalRows = [];\n      var fillGaps = function fillGaps(col, index) {\n        return col === '' || col === undefined ? lastRow[index] : col;\n      };\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var row = _step.value;\n\n          var missing = this._headers.length - row.length;\n          if (missing > 0) row = row.concat(Array(missing).join(\".\").split(\".\"));\n          if (lastRow && this._options.fillGaps) row = row.map(fillGaps);\n          finalRows.push(row.join(this._options.rowDelimiter));\n          lastRow = row;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return finalRows;\n    }\n  }, {\n    key: '_parseArray',\n    value: function _parseArray(json, stream) {\n      var self = this;\n      this._headers = this._headers || [];\n      var fileRows = [];\n      var outputFile = void 0;\n      var fillRows = void 0;\n\n      var getHeaderIndex = function getHeaderIndex(header) {\n        var index = self._headers.indexOf(header);\n        if (index === -1) {\n          self._headers.push(header);\n          index = self._headers.indexOf(header);\n        }\n        return index;\n      };\n\n      //Generate the csv output\n      fillRows = function fillRows(result) {\n        var rows = [];\n        var fillAndPush = function fillAndPush(row) {\n          return rows.push(row.map(function (col) {\n            return col || '';\n          }));\n        };\n        // initialize the array with empty strings to handle 'unpopular' headers\n        var newRow = function newRow() {\n          return new Array(self._headers.length).fill(null);\n        };\n        var emptyRowIndexByHeader = {};\n        var currentRow = newRow();\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = result[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var element = _step2.value;\n\n            var elementHeaderIndex = getHeaderIndex(element.item);\n            if (currentRow[elementHeaderIndex] != undefined) {\n              fillAndPush(currentRow);\n              currentRow = newRow();\n            }\n            emptyRowIndexByHeader[elementHeaderIndex] = emptyRowIndexByHeader[elementHeaderIndex] || 0;\n            // make sure there isnt a empty row for this header\n            if (emptyRowIndexByHeader[elementHeaderIndex] < rows.length) {\n              rows[emptyRowIndexByHeader[elementHeaderIndex]][elementHeaderIndex] = self._escape(element.value);\n              emptyRowIndexByHeader[elementHeaderIndex] += 1;\n              continue;\n            }\n            currentRow[elementHeaderIndex] = self._escape(element.value);\n            emptyRowIndexByHeader[elementHeaderIndex] += 1;\n          }\n          // push last row\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (currentRow.length > 0) {\n          fillAndPush(currentRow);\n        }\n        fileRows = fileRows.concat(self._checkRows(rows));\n      };\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = json[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n\n          //Call checkType to list all items inside this object\n          //Items are returned as a object {item: 'Prop Value, Item Name', value: 'Prop Data Value'}\n          var itemResult = self._handler.check(item, self._options.mainPathItem, item, json);\n          fillRows(itemResult);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (!stream && self._options.includeHeaders) {\n        //Add the headers to the first line\n        fileRows.unshift(this.headers);\n      }\n\n      return joinRows(fileRows, self._options.endOfLine);\n    }\n  }, {\n    key: '_parseObject',\n    value: function _parseObject(json) {\n      var self = this;\n      var fileRows = [];\n      var parseResult = [];\n      var outputFile = void 0;\n      var fillRows = void 0;\n      var horizontalRows = [[], []];\n\n      fillRows = function fillRows(result) {\n        var value = result.value ? result.value.toString() : self._options.undefinedString;\n        value = self._escape(value);\n\n        //Type header;value\n        if (self._options.verticalOutput) {\n          var row = [result.item, value];\n          fileRows.push(row.join(self._options.rowDelimiter));\n        } else {\n          horizontalRows[0].push(result.item);\n          horizontalRows[1].push(value);\n        }\n      };\n      for (var prop in json) {\n        var prefix = \"\";\n        if (this._options.mainPathItem) prefix = this._options.mainPathItem + this._options.headerPathString;\n        parseResult = this._handler.check(json[prop], prefix + prop, prop, json);\n\n        parseResult.forEach(fillRows);\n      }\n      if (!this._options.verticalOutput) {\n        fileRows.push(horizontalRows[0].join(this._options.rowDelimiter));\n        fileRows.push(horizontalRows[1].join(this._options.rowDelimiter));\n      }\n      return joinRows(fileRows, this._options.endOfLine);\n    }\n\n    /**\n     * Replaces the default options with the custom user options\n     *\n     * @param {Options} userOptions\n     */\n\n  }, {\n    key: '_parseOptions',\n    value: function _parseOptions(userOptions) {\n      var defaultOptions = {\n        headers: [], //              Array\n        rename: [], //               Array\n        headerPathString: '.', //    String\n        rowDelimiter: ',', //        String\n        textDelimiter: '\"', //       String\n        arrayPathString: ';', //     String\n        undefinedString: '', //      String\n        endOfLine: EOL || '\\n', //   String\n        mainPathItem: null, //       String\n        booleanTrueString: null, //  String\n        booleanFalseString: null, // String\n        includeHeaders: true, //     Boolean\n        fillGaps: false, //          Boolean\n        verticalOutput: true, //     Boolean\n        forceTextDelimiter: false, //Boolean\n        //Handlers\n        handleString: undefined, //  Function\n        handleNumber: undefined, //  Function\n        handleBoolean: undefined, // Function\n        handleDate: undefined //    Function\n      };\n      return Object.assign({}, defaultOptions, userOptions);\n    }\n  }, {\n    key: 'headers',\n    get: function get() {\n      var _this = this;\n\n      var headers = this._headers;\n\n      if (this._options.rename && this._options.rename.length > 0) headers = headers.map(function (header) {\n        return _this._options.rename[_this._options.headers.indexOf(header)] || header;\n      });\n\n      if (this._options.forceTextDelimiter) {\n        headers = headers.map(function (header) {\n          return '' + _this._options.textDelimiter + header + _this._options.textDelimiter;\n        });\n      }\n\n      if (this._options.mapHeaders) headers = headers.map(this._options.mapHeaders);\n\n      return headers.join(this._options.rowDelimiter);\n    }\n  }]);\n\n  return Parser;\n}();\n\nmodule.exports = Parser;"]},"metadata":{},"sourceType":"script"}