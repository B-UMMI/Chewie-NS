{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, useListController, ListContextProvider } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport ListView from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - filter (the permanent filter to apply to the query)\n * - filters (a React component used to display the filter form)\n * - pagination\n * - perPage\n * - sort\n * - title\n *\n * @example\n *\n * const PostFilter = (props) => (\n *     <Filter {...props}>\n *         <TextInput label=\"Search\" source=\"q\" alwaysOn />\n *         <TextInput label=\"Title\" source=\"title\" />\n *     </Filter>\n * );\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={PostFilter}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\n\nvar List = function (props) {\n  useCheckMinimumRequiredProps('List', ['children'], props);\n  var controllerProps = useListController(props);\n  return React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListView, __assign({}, props, controllerProps)));\n};\n\nList.propTypes = {\n  // the props you can change\n  // @ts-ignore-line\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  aside: PropTypes.element,\n  // @ts-ignore-line\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.element,\n  // @ts-ignore-line\n  pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  perPage: PropTypes.number.isRequired,\n  //@ts-ignore-line\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  title: TitlePropType,\n  // the props managed by react-admin\n  authProvider: PropTypes.func,\n  hasCreate: PropTypes.bool.isRequired,\n  hasEdit: PropTypes.bool.isRequired,\n  hasList: PropTypes.bool.isRequired,\n  hasShow: PropTypes.bool.isRequired,\n  location: PropTypes.any,\n  match: PropTypes.any,\n  path: PropTypes.string,\n  resource: PropTypes.string.isRequired\n};\nList.defaultProps = {\n  filter: {},\n  perPage: 10\n};\nexport default List;","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/list/List.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","PropTypes","useCheckMinimumRequiredProps","useListController","ListContextProvider","TitlePropType","ListView","List","props","controllerProps","createElement","value","propTypes","actions","oneOfType","bool","element","aside","bulkActionButtons","children","node","classes","object","className","string","filter","filterDefaultValues","filters","pagination","perPage","number","isRequired","sort","shape","field","order","title","authProvider","func","hasCreate","hasEdit","hasList","hasShow","location","any","match","path","resource","defaultProps"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, useListController, ListContextProvider, } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport ListView from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - filter (the permanent filter to apply to the query)\n * - filters (a React component used to display the filter form)\n * - pagination\n * - perPage\n * - sort\n * - title\n *\n * @example\n *\n * const PostFilter = (props) => (\n *     <Filter {...props}>\n *         <TextInput label=\"Search\" source=\"q\" alwaysOn />\n *         <TextInput label=\"Title\" source=\"title\" />\n *     </Filter>\n * );\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={PostFilter}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nvar List = function (props) {\n    useCheckMinimumRequiredProps('List', ['children'], props);\n    var controllerProps = useListController(props);\n    return (React.createElement(ListContextProvider, { value: controllerProps },\n        React.createElement(ListView, __assign({}, props, controllerProps))));\n};\nList.propTypes = {\n    // the props you can change\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    // @ts-ignore-line\n    bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.element,\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number.isRequired,\n    //@ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    title: TitlePropType,\n    // the props managed by react-admin\n    authProvider: PropTypes.func,\n    hasCreate: PropTypes.bool.isRequired,\n    hasEdit: PropTypes.bool.isRequired,\n    hasList: PropTypes.bool.isRequired,\n    hasShow: PropTypes.bool.isRequired,\n    location: PropTypes.any,\n    match: PropTypes.any,\n    path: PropTypes.string,\n    resource: PropTypes.string.isRequired,\n};\nList.defaultProps = {\n    filter: {},\n    perPage: 10,\n};\nexport default List;\n"]},"metadata":{},"sourceType":"module"}