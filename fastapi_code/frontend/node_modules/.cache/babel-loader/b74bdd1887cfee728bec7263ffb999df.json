{"ast":null,"code":"import useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.delete() method, the result\n * of the call (the deleted record), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: [callback, { loading: true, loaded: false }]\n * - success: [callback, { data: [data from response], loading: false, loaded: true }]\n * - error: [callback, { error: [error from response], loading: false, loaded: true }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param previousData The record before the delete is applied\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [delete, { data, error, loading, loaded }].\n *\n * @example\n *\n * import { useDelete } from 'react-admin';\n *\n * const DeleteButton = ({ record }) => {\n *     const [deleteOne, { loading, error }] = useDelete('likes', record.id);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteOne}>Delete</div>;\n * };\n */\n\nvar useDelete = function (resource, id, previousData, options) {\n  if (previousData === void 0) {\n    previousData = {};\n  }\n\n  return useMutation({\n    type: 'delete',\n    resource: resource,\n    payload: {\n      id: id,\n      previousData: previousData\n    }\n  }, options);\n};\n\nexport default useDelete;","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/useDelete.js"],"names":["useMutation","useDelete","resource","id","previousData","options","type","payload"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIC,SAAS,GAAG,UAAUC,QAAV,EAAoBC,EAApB,EAAwBC,YAAxB,EAAsCC,OAAtC,EAA+C;AAC3D,MAAID,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,IAAAA,YAAY,GAAG,EAAf;AAAoB;;AACnD,SAAOJ,WAAW,CAAC;AAAEM,IAAAA,IAAI,EAAE,QAAR;AAAkBJ,IAAAA,QAAQ,EAAEA,QAA5B;AAAsCK,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,EAAE,EAAEA,EAAN;AAAUC,MAAAA,YAAY,EAAEA;AAAxB;AAA/C,GAAD,EAA0FC,OAA1F,CAAlB;AACH,CAHD;;AAIA,eAAeJ,SAAf","sourcesContent":["import useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.delete() method, the result\n * of the call (the deleted record), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: [callback, { loading: true, loaded: false }]\n * - success: [callback, { data: [data from response], loading: false, loaded: true }]\n * - error: [callback, { error: [error from response], loading: false, loaded: true }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param previousData The record before the delete is applied\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [delete, { data, error, loading, loaded }].\n *\n * @example\n *\n * import { useDelete } from 'react-admin';\n *\n * const DeleteButton = ({ record }) => {\n *     const [deleteOne, { loading, error }] = useDelete('likes', record.id);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteOne}>Delete</div>;\n * };\n */\nvar useDelete = function (resource, id, previousData, options) {\n    if (previousData === void 0) { previousData = {}; }\n    return useMutation({ type: 'delete', resource: resource, payload: { id: id, previousData: previousData } }, options);\n};\nexport default useDelete;\n"]},"metadata":{},"sourceType":"module"}