{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n/**\n * Test utility to simulate a device form factor for server-side mediaQueries\n *\n * Do not use inside a browser.\n *\n * @example\n *\n * <DeviceTestWrapper width=\"sm\">\n *     <MyResponsiveComponent />\n * <DeviceTestWrapper>\n */\n\nvar DeviceTestWrapper = function (_a) {\n  var _b = _a.width,\n      width = _b === void 0 ? 'md' : _b,\n      children = _a.children;\n  var theme = createMuiTheme(); // Use https://github.com/ericf/css-mediaquery as ponyfill.\n\n  var ssrMatchMedia = function (query) {\n    return {\n      matches: mediaQuery.match(query, {\n        // The estimated CSS width of the browser.\n        // For the sake of this demo, we are using a fixed value.\n        // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n        // or user-agent resolution.\n        width: theme.breakpoints.width(width)\n      })\n    };\n  };\n\n  return React.createElement(ThemeProvider, {\n    theme: __assign(__assign({}, theme), {\n      props: {\n        MuiUseMediaQuery: {\n          ssrMatchMedia: ssrMatchMedia\n        }\n      }\n    })\n  }, children);\n};\n\nexport default DeviceTestWrapper;","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/layout/DeviceTestWrapper.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","mediaQuery","ThemeProvider","createMuiTheme","DeviceTestWrapper","_a","_b","width","children","theme","ssrMatchMedia","query","matches","match","breakpoints","createElement","props","MuiUseMediaQuery"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAO,KAAKO,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA;;;;;;;;;;;;AAWA,IAAIC,iBAAiB,GAAG,UAAUC,EAAV,EAAc;AAClC,MAAIC,EAAE,GAAGD,EAAE,CAACE,KAAZ;AAAA,MAAmBA,KAAK,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAlD;AAAA,MAAsDE,QAAQ,GAAGH,EAAE,CAACG,QAApE;AACA,MAAIC,KAAK,GAAGN,cAAc,EAA1B,CAFkC,CAGlC;;AACA,MAAIO,aAAa,GAAG,UAAUC,KAAV,EAAiB;AAAE,WAAQ;AAC3CC,MAAAA,OAAO,EAAEX,UAAU,CAACY,KAAX,CAAiBF,KAAjB,EAAwB;AAC7B;AACA;AACA;AACA;AACAJ,QAAAA,KAAK,EAAEE,KAAK,CAACK,WAAN,CAAkBP,KAAlB,CAAwBA,KAAxB;AALsB,OAAxB;AADkC,KAAR;AAQlC,GARL;;AASA,SAAQP,KAAK,CAACe,aAAN,CAAoBb,aAApB,EAAmC;AAAEO,IAAAA,KAAK,EAAEvB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKuB,KAAL,CAAT,EAAsB;AAAEO,MAAAA,KAAK,EAAE;AAAEC,QAAAA,gBAAgB,EAAE;AAAEP,UAAAA,aAAa,EAAEA;AAAjB;AAApB;AAAT,KAAtB;AAAjB,GAAnC,EAAgJF,QAAhJ,CAAR;AACH,CAdD;;AAeA,eAAeJ,iBAAf","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n/**\n * Test utility to simulate a device form factor for server-side mediaQueries\n *\n * Do not use inside a browser.\n *\n * @example\n *\n * <DeviceTestWrapper width=\"sm\">\n *     <MyResponsiveComponent />\n * <DeviceTestWrapper>\n */\nvar DeviceTestWrapper = function (_a) {\n    var _b = _a.width, width = _b === void 0 ? 'md' : _b, children = _a.children;\n    var theme = createMuiTheme();\n    // Use https://github.com/ericf/css-mediaquery as ponyfill.\n    var ssrMatchMedia = function (query) { return ({\n        matches: mediaQuery.match(query, {\n            // The estimated CSS width of the browser.\n            // For the sake of this demo, we are using a fixed value.\n            // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n            // or user-agent resolution.\n            width: theme.breakpoints.width(width),\n        }),\n    }); };\n    return (React.createElement(ThemeProvider, { theme: __assign(__assign({}, theme), { props: { MuiUseMediaQuery: { ssrMatchMedia: ssrMatchMedia } } }) }, children));\n};\nexport default DeviceTestWrapper;\n"]},"metadata":{},"sourceType":"module"}