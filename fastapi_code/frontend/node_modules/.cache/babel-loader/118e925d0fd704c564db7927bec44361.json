{"ast":null,"code":"import { useCallback, isValidElement } from 'react';\nimport set from 'lodash/set';\nimport useChoices from './useChoices';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for suggestions handling.\n *\n * @param allowDuplicates A boolean indicating whether a suggestion can be added several times\n * @param allowEmpty A boolean indicating whether an empty suggestion should be added\n * @param choices An array of available choices\n * @param emptyText The text to use for the empty suggestion. Defaults to an empty string\n * @param emptyValue The value to use for the empty suggestion. Defaults to `null`\n * @param limitChoicesToValue A boolean indicating whether the initial suggestions should be limited to the currently selected one(s)\n * @param matchSuggestion Optional unless `optionText` is a React element. Function which check wether a choice matches a filter. Must return a boolean.\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param selectedItem The currently selected item. May be an array of selected items\n * @param suggestionLimit The maximum number of suggestions returned, excluding the empty one if `allowEmpty` is `true`\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n * - getSuggestions: A function taking a filter value (string) and returning the matching suggestions\n */\n\nvar useSuggestions = function (_a) {\n  var allowDuplicates = _a.allowDuplicates,\n      allowEmpty = _a.allowEmpty,\n      choices = _a.choices,\n      _b = _a.emptyText,\n      emptyText = _b === void 0 ? '' : _b,\n      _c = _a.emptyValue,\n      emptyValue = _c === void 0 ? null : _c,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      matchSuggestion = _a.matchSuggestion,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      selectedItem = _a.selectedItem,\n      _d = _a.suggestionLimit,\n      suggestionLimit = _d === void 0 ? 0 : _d,\n      translateChoice = _a.translateChoice;\n  var translate = useTranslate();\n\n  var _e = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _e.getChoiceText,\n      getChoiceValue = _e.getChoiceValue;\n\n  var getSuggestions = useCallback(getSuggestionsFactory({\n    allowDuplicates: allowDuplicates,\n    allowEmpty: allowEmpty,\n    choices: choices,\n    emptyText: translate(emptyText, {\n      _: emptyText\n    }),\n    emptyValue: emptyValue,\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItem,\n    suggestionLimit: suggestionLimit\n  }), [allowDuplicates, allowEmpty, choices, emptyText, emptyValue, getChoiceText, getChoiceValue, limitChoicesToValue, matchSuggestion, optionText, optionValue, selectedItem, suggestionLimit, translate]);\n  return {\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    getSuggestions: getSuggestions\n  };\n};\n\nexport default useSuggestions;\n\nvar escapeRegExp = function (value) {\n  return value ? value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '';\n}; // $& means the whole matched string\n\n/**\n * Default matcher implementation which check whether the suggestion text matches the filter.\n */\n\n\nvar defaultMatchSuggestion = function (getChoiceText) {\n  return function (filter, suggestion) {\n    var suggestionText = getChoiceText(suggestion);\n    var isReactElement = isValidElement(suggestionText);\n    return isReactElement ? false : suggestionText && suggestionText.match( // We must escape any RegExp reserved characters to avoid errors\n    // For example, the filter might contains * which must be escaped as \\*\n    new RegExp(escapeRegExp(filter), 'i'));\n  };\n};\n/**\n * Get the suggestions to display after applying a fuzzy search on the available choices\n *\n * @example\n *\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n */\n\n\nexport var getSuggestionsFactory = function (_a) {\n  var _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      allowDuplicates = _a.allowDuplicates,\n      allowEmpty = _a.allowEmpty,\n      emptyText = _a.emptyText,\n      emptyValue = _a.emptyValue,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      getChoiceText = _a.getChoiceText,\n      getChoiceValue = _a.getChoiceValue,\n      _c = _a.limitChoicesToValue,\n      limitChoicesToValue = _c === void 0 ? false : _c,\n      _d = _a.matchSuggestion,\n      matchSuggestion = _d === void 0 ? defaultMatchSuggestion(getChoiceText) : _d,\n      selectedItem = _a.selectedItem,\n      _e = _a.suggestionLimit,\n      suggestionLimit = _e === void 0 ? 0 : _e;\n  return function (filter) {\n    var suggestions = []; // if an item is selected and matches the filter\n\n    if (selectedItem && !Array.isArray(selectedItem) && matchSuggestion(filter, selectedItem)) {\n      if (limitChoicesToValue) {\n        // display only the selected item\n        suggestions = choices.filter(function (choice) {\n          return getChoiceValue(choice) === getChoiceValue(selectedItem);\n        });\n      } else if (!allowDuplicates) {\n        // ignore the filter to show more choices\n        suggestions = removeAlreadySelectedSuggestions(choices, selectedItem, getChoiceValue);\n      } else {\n        suggestions = choices;\n      }\n    } else {\n      suggestions = choices.filter(function (choice) {\n        return matchSuggestion(filter, choice);\n      });\n\n      if (!allowDuplicates) {\n        suggestions = removeAlreadySelectedSuggestions(suggestions, selectedItem, getChoiceValue);\n      }\n    }\n\n    suggestions = limitSuggestions(suggestions, suggestionLimit);\n\n    if (allowEmpty) {\n      suggestions = addEmptySuggestion(suggestions, {\n        optionText: optionText,\n        optionValue: optionValue,\n        emptyText: emptyText,\n        emptyValue: emptyValue\n      });\n    }\n\n    return suggestions;\n  };\n};\n/**\n * @example\n *\n * removeAlreadySelectedSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  [{ id: 1, name: 'foo'}]\n * );\n *\n * // Will return [{ id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param selectedItems List of selection\n * @param getChoiceValue Converter function from suggestion to value\n */\n\nvar removeAlreadySelectedSuggestions = function (suggestions, selectedItems, getChoiceValue) {\n  if (!selectedItems) {\n    return suggestions;\n  }\n\n  var selectedValues = Array.isArray(selectedItems) ? selectedItems.map(getChoiceValue) : [getChoiceValue(selectedItems)];\n  return suggestions.filter(function (suggestion) {\n    return !selectedValues.includes(getChoiceValue(suggestion));\n  });\n};\n/**\n * @example\n *\n * limitSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  1\n * );\n *\n * // Will return [{ id: 1, name: 'foo' }]\n *\n * @param suggestions List of suggestions\n * @param limit\n */\n\n\nvar limitSuggestions = function (suggestions, limit) {\n  if (limit === void 0) {\n    limit = 0;\n  }\n\n  return Number.isInteger(limit) && limit > 0 ? suggestions.slice(0, limit) : suggestions;\n};\n/**\n * addEmptySuggestion(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n * );\n *\n * // Will return [{ id: null, name: '' }, { id: 1, name: 'foo' }, , { id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param options\n */\n\n\nvar addEmptySuggestion = function (suggestions, _a) {\n  var _b = _a.optionText,\n      optionText = _b === void 0 ? 'name' : _b,\n      _c = _a.optionValue,\n      optionValue = _c === void 0 ? 'id' : _c,\n      _d = _a.emptyText,\n      emptyText = _d === void 0 ? '' : _d,\n      _e = _a.emptyValue,\n      emptyValue = _e === void 0 ? null : _e;\n  var newSuggestions = suggestions;\n  var emptySuggestion = {};\n  set(emptySuggestion, optionValue, emptyValue);\n\n  if (typeof optionText === 'string') {\n    set(emptySuggestion, optionText, emptyText);\n  }\n\n  return [].concat(emptySuggestion, newSuggestions);\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/form/useSuggestions.js"],"names":["useCallback","isValidElement","set","useChoices","useTranslate","useSuggestions","_a","allowDuplicates","allowEmpty","choices","_b","emptyText","_c","emptyValue","limitChoicesToValue","matchSuggestion","optionText","optionValue","selectedItem","_d","suggestionLimit","translateChoice","translate","_e","getChoiceText","getChoiceValue","getSuggestions","getSuggestionsFactory","_","escapeRegExp","value","replace","defaultMatchSuggestion","filter","suggestion","suggestionText","isReactElement","match","RegExp","suggestions","Array","isArray","choice","removeAlreadySelectedSuggestions","limitSuggestions","addEmptySuggestion","selectedItems","selectedValues","map","includes","limit","Number","isInteger","slice","newSuggestions","emptySuggestion","concat"],"mappings":"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","sourcesContent":["import { useCallback, isValidElement } from 'react';\nimport set from 'lodash/set';\nimport useChoices from './useChoices';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for suggestions handling.\n *\n * @param allowDuplicates A boolean indicating whether a suggestion can be added several times\n * @param allowEmpty A boolean indicating whether an empty suggestion should be added\n * @param choices An array of available choices\n * @param emptyText The text to use for the empty suggestion. Defaults to an empty string\n * @param emptyValue The value to use for the empty suggestion. Defaults to `null`\n * @param limitChoicesToValue A boolean indicating whether the initial suggestions should be limited to the currently selected one(s)\n * @param matchSuggestion Optional unless `optionText` is a React element. Function which check wether a choice matches a filter. Must return a boolean.\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param selectedItem The currently selected item. May be an array of selected items\n * @param suggestionLimit The maximum number of suggestions returned, excluding the empty one if `allowEmpty` is `true`\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n * - getSuggestions: A function taking a filter value (string) and returning the matching suggestions\n */\nvar useSuggestions = function (_a) {\n    var allowDuplicates = _a.allowDuplicates, allowEmpty = _a.allowEmpty, choices = _a.choices, _b = _a.emptyText, emptyText = _b === void 0 ? '' : _b, _c = _a.emptyValue, emptyValue = _c === void 0 ? null : _c, limitChoicesToValue = _a.limitChoicesToValue, matchSuggestion = _a.matchSuggestion, optionText = _a.optionText, optionValue = _a.optionValue, selectedItem = _a.selectedItem, _d = _a.suggestionLimit, suggestionLimit = _d === void 0 ? 0 : _d, translateChoice = _a.translateChoice;\n    var translate = useTranslate();\n    var _e = useChoices({\n        optionText: optionText,\n        optionValue: optionValue,\n        translateChoice: translateChoice,\n    }), getChoiceText = _e.getChoiceText, getChoiceValue = _e.getChoiceValue;\n    var getSuggestions = useCallback(getSuggestionsFactory({\n        allowDuplicates: allowDuplicates,\n        allowEmpty: allowEmpty,\n        choices: choices,\n        emptyText: translate(emptyText, { _: emptyText }),\n        emptyValue: emptyValue,\n        getChoiceText: getChoiceText,\n        getChoiceValue: getChoiceValue,\n        limitChoicesToValue: limitChoicesToValue,\n        matchSuggestion: matchSuggestion,\n        optionText: optionText,\n        optionValue: optionValue,\n        selectedItem: selectedItem,\n        suggestionLimit: suggestionLimit,\n    }), [\n        allowDuplicates,\n        allowEmpty,\n        choices,\n        emptyText,\n        emptyValue,\n        getChoiceText,\n        getChoiceValue,\n        limitChoicesToValue,\n        matchSuggestion,\n        optionText,\n        optionValue,\n        selectedItem,\n        suggestionLimit,\n        translate,\n    ]);\n    return {\n        getChoiceText: getChoiceText,\n        getChoiceValue: getChoiceValue,\n        getSuggestions: getSuggestions,\n    };\n};\nexport default useSuggestions;\nvar escapeRegExp = function (value) {\n    return value ? value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '';\n}; // $& means the whole matched string\n/**\n * Default matcher implementation which check whether the suggestion text matches the filter.\n */\nvar defaultMatchSuggestion = function (getChoiceText) { return function (filter, suggestion) {\n    var suggestionText = getChoiceText(suggestion);\n    var isReactElement = isValidElement(suggestionText);\n    return isReactElement\n        ? false\n        : suggestionText &&\n            suggestionText.match(\n            // We must escape any RegExp reserved characters to avoid errors\n            // For example, the filter might contains * which must be escaped as \\*\n            new RegExp(escapeRegExp(filter), 'i'));\n}; };\n/**\n * Get the suggestions to display after applying a fuzzy search on the available choices\n *\n * @example\n *\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n */\nexport var getSuggestionsFactory = function (_a) {\n    var _b = _a.choices, choices = _b === void 0 ? [] : _b, allowDuplicates = _a.allowDuplicates, allowEmpty = _a.allowEmpty, emptyText = _a.emptyText, emptyValue = _a.emptyValue, optionText = _a.optionText, optionValue = _a.optionValue, getChoiceText = _a.getChoiceText, getChoiceValue = _a.getChoiceValue, _c = _a.limitChoicesToValue, limitChoicesToValue = _c === void 0 ? false : _c, _d = _a.matchSuggestion, matchSuggestion = _d === void 0 ? defaultMatchSuggestion(getChoiceText) : _d, selectedItem = _a.selectedItem, _e = _a.suggestionLimit, suggestionLimit = _e === void 0 ? 0 : _e;\n    return function (filter) {\n        var suggestions = [];\n        // if an item is selected and matches the filter\n        if (selectedItem &&\n            !Array.isArray(selectedItem) &&\n            matchSuggestion(filter, selectedItem)) {\n            if (limitChoicesToValue) {\n                // display only the selected item\n                suggestions = choices.filter(function (choice) {\n                    return getChoiceValue(choice) === getChoiceValue(selectedItem);\n                });\n            }\n            else if (!allowDuplicates) {\n                // ignore the filter to show more choices\n                suggestions = removeAlreadySelectedSuggestions(choices, selectedItem, getChoiceValue);\n            }\n            else {\n                suggestions = choices;\n            }\n        }\n        else {\n            suggestions = choices.filter(function (choice) { return matchSuggestion(filter, choice); });\n            if (!allowDuplicates) {\n                suggestions = removeAlreadySelectedSuggestions(suggestions, selectedItem, getChoiceValue);\n            }\n        }\n        suggestions = limitSuggestions(suggestions, suggestionLimit);\n        if (allowEmpty) {\n            suggestions = addEmptySuggestion(suggestions, {\n                optionText: optionText,\n                optionValue: optionValue,\n                emptyText: emptyText,\n                emptyValue: emptyValue,\n            });\n        }\n        return suggestions;\n    };\n};\n/**\n * @example\n *\n * removeAlreadySelectedSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  [{ id: 1, name: 'foo'}]\n * );\n *\n * // Will return [{ id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param selectedItems List of selection\n * @param getChoiceValue Converter function from suggestion to value\n */\nvar removeAlreadySelectedSuggestions = function (suggestions, selectedItems, getChoiceValue) {\n    if (!selectedItems) {\n        return suggestions;\n    }\n    var selectedValues = Array.isArray(selectedItems)\n        ? selectedItems.map(getChoiceValue)\n        : [getChoiceValue(selectedItems)];\n    return suggestions.filter(function (suggestion) { return !selectedValues.includes(getChoiceValue(suggestion)); });\n};\n/**\n * @example\n *\n * limitSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  1\n * );\n *\n * // Will return [{ id: 1, name: 'foo' }]\n *\n * @param suggestions List of suggestions\n * @param limit\n */\nvar limitSuggestions = function (suggestions, limit) {\n    if (limit === void 0) { limit = 0; }\n    return Number.isInteger(limit) && limit > 0\n        ? suggestions.slice(0, limit)\n        : suggestions;\n};\n/**\n * addEmptySuggestion(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n * );\n *\n * // Will return [{ id: null, name: '' }, { id: 1, name: 'foo' }, , { id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param options\n */\nvar addEmptySuggestion = function (suggestions, _a) {\n    var _b = _a.optionText, optionText = _b === void 0 ? 'name' : _b, _c = _a.optionValue, optionValue = _c === void 0 ? 'id' : _c, _d = _a.emptyText, emptyText = _d === void 0 ? '' : _d, _e = _a.emptyValue, emptyValue = _e === void 0 ? null : _e;\n    var newSuggestions = suggestions;\n    var emptySuggestion = {};\n    set(emptySuggestion, optionValue, emptyValue);\n    if (typeof optionText === 'string') {\n        set(emptySuggestion, optionText, emptyText);\n    }\n    return [].concat(emptySuggestion, newSuggestions);\n};\n"]},"metadata":{},"sourceType":"module"}