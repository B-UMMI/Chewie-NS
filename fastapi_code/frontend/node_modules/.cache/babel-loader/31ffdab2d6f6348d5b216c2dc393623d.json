{"ast":null,"code":"import lodashMemoize from 'lodash/memoize';\n/* eslint-disable no-underscore-dangle */\n\n/* @link http://stackoverflow.com/questions/46155/validate-email-address-in-javascript */\n\nvar EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-line no-useless-escape\n\nvar isEmpty = function (value) {\n  return typeof value === 'undefined' || value === null || value === '' || Array.isArray(value) && value.length === 0;\n};\n\nvar getMessage = function (message, messageArgs, value, values) {\n  return typeof message === 'function' ? message({\n    args: messageArgs,\n    value: value,\n    values: values\n  }) : messageArgs ? {\n    message: message,\n    args: messageArgs\n  } : message;\n}; // If we define validation functions directly in JSX, it will\n// result in a new function at every render, and then trigger infinite re-render.\n// Hence, we memoize every built-in validator to prevent a \"Maximum call stack\" error.\n\n\nvar memoize = function (fn) {\n  return lodashMemoize(fn, function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return JSON.stringify(args);\n  });\n}; // Compose multiple validators into a single one for use with final-form\n\n\nexport var composeValidators = function () {\n  var validators = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    validators[_i] = arguments[_i];\n  }\n\n  return function (value, values, meta) {\n    var allValidators = Array.isArray(validators[0]) ? validators[0] : validators;\n    return allValidators.reduce(function (error, validator) {\n      return error || typeof validator === 'function' && validator(value, values, meta);\n    }, undefined);\n  };\n};\n/**\n * Required validator\n *\n * Returns an error if the value is null, undefined, or empty\n *\n * @param {string|function} message\n *\n * @example\n *\n * const titleValidators = [required('The title is required')];\n * <TextInput name=\"title\" validate={titleValidators} />\n */\n\nexport var required = memoize(function (message) {\n  if (message === void 0) {\n    message = 'ra.validation.required';\n  }\n\n  return Object.assign(function (value, values) {\n    return isEmpty(value) ? getMessage(message, undefined, value, values) : undefined;\n  }, {\n    isRequired: true\n  });\n});\n/**\n * Minimum length validator\n *\n * Returns an error if the value has a length less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const passwordValidators = [minLength(10, 'Should be at least 10 characters')];\n * <TextInput type=\"password\" name=\"password\" validate={passwordValidators} />\n */\n\nexport var minLength = memoize(function (min, message) {\n  if (message === void 0) {\n    message = 'ra.validation.minLength';\n  }\n\n  return function (value, values) {\n    return !isEmpty(value) && value.length < min ? getMessage(message, {\n      min: min\n    }, value, values) : undefined;\n  };\n});\n/**\n * Maximum length validator\n *\n * Returns an error if the value has a length higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const nameValidators = [maxLength(10, 'Should be at most 10 characters')];\n * <TextInput name=\"name\" validate={nameValidators} />\n */\n\nexport var maxLength = memoize(function (max, message) {\n  if (message === void 0) {\n    message = 'ra.validation.maxLength';\n  }\n\n  return function (value, values) {\n    return !isEmpty(value) && value.length > max ? getMessage(message, {\n      max: max\n    }, value, values) : undefined;\n  };\n});\n/**\n * Minimum validator\n *\n * Returns an error if the value is less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [minValue(5, 'Should be more than 5')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\n\nexport var minValue = memoize(function (min, message) {\n  if (message === void 0) {\n    message = 'ra.validation.minValue';\n  }\n\n  return function (value, values) {\n    return !isEmpty(value) && value < min ? getMessage(message, {\n      min: min\n    }, value, values) : undefined;\n  };\n});\n/**\n * Maximum validator\n *\n * Returns an error if the value is higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [maxValue(10, 'Should be less than 10')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\n\nexport var maxValue = memoize(function (max, message) {\n  if (message === void 0) {\n    message = 'ra.validation.maxValue';\n  }\n\n  return function (value, values) {\n    return !isEmpty(value) && value > max ? getMessage(message, {\n      max: max\n    }, value, values) : undefined;\n  };\n});\n/**\n * Number validator\n *\n * Returns an error if the value is not a number\n *\n * @param {string|function} message\n *\n * @example\n *\n * const ageValidators = [number('Must be a number')];\n * <TextInput name=\"age\" validate={ageValidators} />\n */\n\nexport var number = memoize(function (message) {\n  if (message === void 0) {\n    message = 'ra.validation.number';\n  }\n\n  return function (value, values) {\n    return !isEmpty(value) && isNaN(Number(value)) ? getMessage(message, undefined, value, values) : undefined;\n  };\n});\n/**\n * Regular expression validator\n *\n * Returns an error if the value does not match the pattern given as parameter\n *\n * @param {RegExp} pattern\n * @param {string|function} message\n *\n * @example\n *\n * const zipValidators = [regex(/^\\d{5}(?:[-\\s]\\d{4})?$/, 'Must be a zip code')];\n * <TextInput name=\"zip\" validate={zipValidators} />\n */\n\nexport var regex = lodashMemoize(function (pattern, message) {\n  if (message === void 0) {\n    message = 'ra.validation.regex';\n  }\n\n  return function (value, values) {\n    return !isEmpty(value) && typeof value === 'string' && !pattern.test(value) ? getMessage(message, {\n      pattern: pattern\n    }, value, values) : undefined;\n  };\n}, function (pattern, message) {\n  return pattern.toString() + message;\n});\n/**\n * Email validator\n *\n * Returns an error if the value is not a valid email\n *\n * @param {string|function} message\n *\n * @example\n *\n * const emailValidators = [email('Must be an email')];\n * <TextInput name=\"email\" validate={emailValidators} />\n */\n\nexport var email = memoize(function (message) {\n  if (message === void 0) {\n    message = 'ra.validation.email';\n  }\n\n  return regex(EMAIL_REGEX, message);\n});\n\nvar oneOfTypeMessage = function (_a) {\n  var args = _a.args;\n  return {\n    message: 'ra.validation.oneOf',\n    args: args\n  };\n};\n/**\n * Choices validator\n *\n * Returns an error if the value is not among the list passed as parameter\n *\n * @param {array} list\n * @param {string|function} message\n *\n * @example\n *\n * const genderValidators = [choices(['male', 'female'], 'Must be either Male or Female')];\n * <TextInput name=\"gender\" validate={genderValidators} />\n */\n\n\nexport var choices = memoize(function (list, message) {\n  if (message === void 0) {\n    message = oneOfTypeMessage;\n  }\n\n  return function (value, values) {\n    return !isEmpty(value) && list.indexOf(value) === -1 ? getMessage(message, {\n      list: list\n    }, value, values) : undefined;\n  };\n});","map":{"version":3,"sources":["/node_modules/ra-core/esm/form/validate.js"],"names":["lodashMemoize","EMAIL_REGEX","isEmpty","value","Array","isArray","length","getMessage","message","messageArgs","values","args","memoize","fn","_i","arguments","JSON","stringify","composeValidators","validators","meta","allValidators","reduce","error","validator","undefined","required","Object","assign","isRequired","minLength","min","maxLength","max","minValue","maxValue","number","isNaN","Number","regex","pattern","test","toString","email","oneOfTypeMessage","_a","choices","list","indexOf"],"mappings":"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","sourcesContent":["import lodashMemoize from 'lodash/memoize';\n/* eslint-disable no-underscore-dangle */\n/* @link http://stackoverflow.com/questions/46155/validate-email-address-in-javascript */\nvar EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-line no-useless-escape\nvar isEmpty = function (value) {\n    return typeof value === 'undefined' ||\n        value === null ||\n        value === '' ||\n        (Array.isArray(value) && value.length === 0);\n};\nvar getMessage = function (message, messageArgs, value, values) {\n    return typeof message === 'function'\n        ? message({\n            args: messageArgs,\n            value: value,\n            values: values,\n        })\n        : messageArgs\n            ? {\n                message: message,\n                args: messageArgs,\n            }\n            : message;\n};\n// If we define validation functions directly in JSX, it will\n// result in a new function at every render, and then trigger infinite re-render.\n// Hence, we memoize every built-in validator to prevent a \"Maximum call stack\" error.\nvar memoize = function (fn) {\n    return lodashMemoize(fn, function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return JSON.stringify(args);\n    });\n};\n// Compose multiple validators into a single one for use with final-form\nexport var composeValidators = function () {\n    var validators = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        validators[_i] = arguments[_i];\n    }\n    return function (value, values, meta) {\n        var allValidators = Array.isArray(validators[0])\n            ? validators[0]\n            : validators;\n        return allValidators.reduce(function (error, validator) {\n            return error ||\n                (typeof validator === 'function' && validator(value, values, meta));\n        }, undefined);\n    };\n};\n/**\n * Required validator\n *\n * Returns an error if the value is null, undefined, or empty\n *\n * @param {string|function} message\n *\n * @example\n *\n * const titleValidators = [required('The title is required')];\n * <TextInput name=\"title\" validate={titleValidators} />\n */\nexport var required = memoize(function (message) {\n    if (message === void 0) { message = 'ra.validation.required'; }\n    return Object.assign(function (value, values) {\n        return isEmpty(value)\n            ? getMessage(message, undefined, value, values)\n            : undefined;\n    }, { isRequired: true });\n});\n/**\n * Minimum length validator\n *\n * Returns an error if the value has a length less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const passwordValidators = [minLength(10, 'Should be at least 10 characters')];\n * <TextInput type=\"password\" name=\"password\" validate={passwordValidators} />\n */\nexport var minLength = memoize(function (min, message) {\n    if (message === void 0) { message = 'ra.validation.minLength'; }\n    return function (value, values) {\n        return !isEmpty(value) && value.length < min\n            ? getMessage(message, { min: min }, value, values)\n            : undefined;\n    };\n});\n/**\n * Maximum length validator\n *\n * Returns an error if the value has a length higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const nameValidators = [maxLength(10, 'Should be at most 10 characters')];\n * <TextInput name=\"name\" validate={nameValidators} />\n */\nexport var maxLength = memoize(function (max, message) {\n    if (message === void 0) { message = 'ra.validation.maxLength'; }\n    return function (value, values) {\n        return !isEmpty(value) && value.length > max\n            ? getMessage(message, { max: max }, value, values)\n            : undefined;\n    };\n});\n/**\n * Minimum validator\n *\n * Returns an error if the value is less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [minValue(5, 'Should be more than 5')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\nexport var minValue = memoize(function (min, message) {\n    if (message === void 0) { message = 'ra.validation.minValue'; }\n    return function (value, values) {\n        return !isEmpty(value) && value < min\n            ? getMessage(message, { min: min }, value, values)\n            : undefined;\n    };\n});\n/**\n * Maximum validator\n *\n * Returns an error if the value is higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [maxValue(10, 'Should be less than 10')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\nexport var maxValue = memoize(function (max, message) {\n    if (message === void 0) { message = 'ra.validation.maxValue'; }\n    return function (value, values) {\n        return !isEmpty(value) && value > max\n            ? getMessage(message, { max: max }, value, values)\n            : undefined;\n    };\n});\n/**\n * Number validator\n *\n * Returns an error if the value is not a number\n *\n * @param {string|function} message\n *\n * @example\n *\n * const ageValidators = [number('Must be a number')];\n * <TextInput name=\"age\" validate={ageValidators} />\n */\nexport var number = memoize(function (message) {\n    if (message === void 0) { message = 'ra.validation.number'; }\n    return function (value, values) {\n        return !isEmpty(value) && isNaN(Number(value))\n            ? getMessage(message, undefined, value, values)\n            : undefined;\n    };\n});\n/**\n * Regular expression validator\n *\n * Returns an error if the value does not match the pattern given as parameter\n *\n * @param {RegExp} pattern\n * @param {string|function} message\n *\n * @example\n *\n * const zipValidators = [regex(/^\\d{5}(?:[-\\s]\\d{4})?$/, 'Must be a zip code')];\n * <TextInput name=\"zip\" validate={zipValidators} />\n */\nexport var regex = lodashMemoize(function (pattern, message) {\n    if (message === void 0) { message = 'ra.validation.regex'; }\n    return function (value, values) {\n        return !isEmpty(value) && typeof value === 'string' && !pattern.test(value)\n            ? getMessage(message, { pattern: pattern }, value, values)\n            : undefined;\n    };\n}, function (pattern, message) {\n    return pattern.toString() + message;\n});\n/**\n * Email validator\n *\n * Returns an error if the value is not a valid email\n *\n * @param {string|function} message\n *\n * @example\n *\n * const emailValidators = [email('Must be an email')];\n * <TextInput name=\"email\" validate={emailValidators} />\n */\nexport var email = memoize(function (message) {\n    if (message === void 0) { message = 'ra.validation.email'; }\n    return regex(EMAIL_REGEX, message);\n});\nvar oneOfTypeMessage = function (_a) {\n    var args = _a.args;\n    return ({\n        message: 'ra.validation.oneOf',\n        args: args,\n    });\n};\n/**\n * Choices validator\n *\n * Returns an error if the value is not among the list passed as parameter\n *\n * @param {array} list\n * @param {string|function} message\n *\n * @example\n *\n * const genderValidators = [choices(['male', 'female'], 'Must be either Male or Female')];\n * <TextInput name=\"gender\" validate={genderValidators} />\n */\nexport var choices = memoize(function (list, message) {\n    if (message === void 0) { message = oneOfTypeMessage; }\n    return function (value, values) {\n        return !isEmpty(value) && list.indexOf(value) === -1\n            ? getMessage(message, { list: list }, value, values)\n            : undefined;\n    };\n});\n"]},"metadata":{},"sourceType":"module"}