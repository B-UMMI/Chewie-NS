{"ast":null,"code":"import { isValidElement, cloneElement, useCallback } from 'react';\nimport get from 'lodash/get';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for choices handling.\n *\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n */\n\nvar useChoices = function (_a) {\n  var _b = _a.optionText,\n      optionText = _b === void 0 ? 'name' : _b,\n      _c = _a.optionValue,\n      optionValue = _c === void 0 ? 'id' : _c,\n      _d = _a.translateChoice,\n      translateChoice = _d === void 0 ? true : _d;\n  var translate = useTranslate();\n  var getChoiceText = useCallback(function (choice) {\n    if (isValidElement(optionText)) {\n      return cloneElement(optionText, {\n        record: choice\n      });\n    }\n\n    var choiceName = typeof optionText === 'function' ? optionText(choice) : get(choice, optionText);\n    return translateChoice ? translate(choiceName, {\n      _: choiceName\n    }) : choiceName;\n  }, [optionText, translate, translateChoice]);\n  var getChoiceValue = useCallback(function (choice) {\n    return get(choice, optionValue);\n  }, [optionValue]);\n  return {\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue\n  };\n};\n\nexport default useChoices;","map":{"version":3,"sources":["/node_modules/ra-core/esm/form/useChoices.js"],"names":["isValidElement","cloneElement","useCallback","get","useTranslate","useChoices","_a","_b","optionText","_c","optionValue","_d","translateChoice","translate","getChoiceText","choice","record","choiceName","_","getChoiceValue"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,WAAvC,QAA0D,OAA1D;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA;;;;;;;;;;;;AAWA,IAAIC,UAAU,GAAG,UAAUC,EAAV,EAAc;AAC3B,MAAIC,EAAE,GAAGD,EAAE,CAACE,UAAZ;AAAA,MAAwBA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,MAAhB,GAAyBA,EAA9D;AAAA,MAAkEE,EAAE,GAAGH,EAAE,CAACI,WAA1E;AAAA,MAAuFA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAA5H;AAAA,MAAgIE,EAAE,GAAGL,EAAE,CAACM,eAAxI;AAAA,MAAyJA,eAAe,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAlM;AACA,MAAIE,SAAS,GAAGT,YAAY,EAA5B;AACA,MAAIU,aAAa,GAAGZ,WAAW,CAAC,UAAUa,MAAV,EAAkB;AAC9C,QAAIf,cAAc,CAACQ,UAAD,CAAlB,EAAgC;AAC5B,aAAOP,YAAY,CAACO,UAAD,EAAa;AAC5BQ,QAAAA,MAAM,EAAED;AADoB,OAAb,CAAnB;AAGH;;AACD,QAAIE,UAAU,GAAG,OAAOT,UAAP,KAAsB,UAAtB,GACXA,UAAU,CAACO,MAAD,CADC,GAEXZ,GAAG,CAACY,MAAD,EAASP,UAAT,CAFT;AAGA,WAAOI,eAAe,GAChBC,SAAS,CAACI,UAAD,EAAa;AAAEC,MAAAA,CAAC,EAAED;AAAL,KAAb,CADO,GAEhBA,UAFN;AAGH,GAZ8B,EAY5B,CAACT,UAAD,EAAaK,SAAb,EAAwBD,eAAxB,CAZ4B,CAA/B;AAaA,MAAIO,cAAc,GAAGjB,WAAW,CAAC,UAAUa,MAAV,EAAkB;AAAE,WAAOZ,GAAG,CAACY,MAAD,EAASL,WAAT,CAAV;AAAkC,GAAvD,EAAyD,CACrFA,WADqF,CAAzD,CAAhC;AAGA,SAAO;AACHI,IAAAA,aAAa,EAAEA,aADZ;AAEHK,IAAAA,cAAc,EAAEA;AAFb,GAAP;AAIH,CAvBD;;AAwBA,eAAed,UAAf","sourcesContent":["import { isValidElement, cloneElement, useCallback } from 'react';\nimport get from 'lodash/get';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for choices handling.\n *\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n */\nvar useChoices = function (_a) {\n    var _b = _a.optionText, optionText = _b === void 0 ? 'name' : _b, _c = _a.optionValue, optionValue = _c === void 0 ? 'id' : _c, _d = _a.translateChoice, translateChoice = _d === void 0 ? true : _d;\n    var translate = useTranslate();\n    var getChoiceText = useCallback(function (choice) {\n        if (isValidElement(optionText)) {\n            return cloneElement(optionText, {\n                record: choice,\n            });\n        }\n        var choiceName = typeof optionText === 'function'\n            ? optionText(choice)\n            : get(choice, optionText);\n        return translateChoice\n            ? translate(choiceName, { _: choiceName })\n            : choiceName;\n    }, [optionText, translate, translateChoice]);\n    var getChoiceValue = useCallback(function (choice) { return get(choice, optionValue); }, [\n        optionValue,\n    ]);\n    return {\n        getChoiceText: getChoiceText,\n        getChoiceValue: getChoiceValue,\n    };\n};\nexport default useChoices;\n"]},"metadata":{},"sourceType":"module"}