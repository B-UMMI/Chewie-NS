{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchStart, fetchEnd } from '../actions/fetchActions';\n/**\n * Update the loading count, which starts or stops the loading indicator.\n *\n * To be used to show the loading indicator when you don't use the dataProvider.\n *\n * @return {Object} startLoading and stopLoading callbacks\n *\n * @example\n * import { useUpdateLoading } from 'react-admin'\n *\n * const MyComponent = () => {\n *      const { startLoading, stopLoading } = useUpdateLoading();\n *      useEffect(() => {\n *          startLoading();\n *          fetch('http://my.domain.api/foo')\n *              .finally(() => stopLoading());\n *      }, []);\n *      return <span>Foo</span>;\n * }\n */\n\nexport default (function () {\n  var dispatch = useDispatch();\n  var startLoading = useCallback(function () {\n    dispatch(fetchStart());\n  }, [dispatch]);\n  var stopLoading = useCallback(function () {\n    dispatch(fetchEnd());\n  }, [dispatch]);\n  return {\n    startLoading: startLoading,\n    stopLoading: stopLoading\n  };\n});","map":{"version":3,"sources":["/node_modules/ra-core/esm/loading/useUpdateLoading.js"],"names":["useCallback","useDispatch","fetchStart","fetchEnd","dispatch","startLoading","stopLoading"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,yBAArC;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA,gBAAgB,YAAY;AACxB,MAAIC,QAAQ,GAAGH,WAAW,EAA1B;AACA,MAAII,YAAY,GAAGL,WAAW,CAAC,YAAY;AACvCI,IAAAA,QAAQ,CAACF,UAAU,EAAX,CAAR;AACH,GAF6B,EAE3B,CAACE,QAAD,CAF2B,CAA9B;AAGA,MAAIE,WAAW,GAAGN,WAAW,CAAC,YAAY;AACtCI,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACH,GAF4B,EAE1B,CAACC,QAAD,CAF0B,CAA7B;AAGA,SAAO;AAAEC,IAAAA,YAAY,EAAEA,YAAhB;AAA8BC,IAAAA,WAAW,EAAEA;AAA3C,GAAP;AACH,CATD","sourcesContent":["import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchStart, fetchEnd } from '../actions/fetchActions';\n/**\n * Update the loading count, which starts or stops the loading indicator.\n *\n * To be used to show the loading indicator when you don't use the dataProvider.\n *\n * @return {Object} startLoading and stopLoading callbacks\n *\n * @example\n * import { useUpdateLoading } from 'react-admin'\n *\n * const MyComponent = () => {\n *      const { startLoading, stopLoading } = useUpdateLoading();\n *      useEffect(() => {\n *          startLoading();\n *          fetch('http://my.domain.api/foo')\n *              .finally(() => stopLoading());\n *      }, []);\n *      return <span>Foo</span>;\n * }\n */\nexport default (function () {\n    var dispatch = useDispatch();\n    var startLoading = useCallback(function () {\n        dispatch(fetchStart());\n    }, [dispatch]);\n    var stopLoading = useCallback(function () {\n        dispatch(fetchEnd());\n    }, [dispatch]);\n    return { startLoading: startLoading, stopLoading: stopLoading };\n});\n"]},"metadata":{},"sourceType":"module"}