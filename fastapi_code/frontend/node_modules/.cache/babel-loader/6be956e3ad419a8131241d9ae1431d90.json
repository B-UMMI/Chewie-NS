{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { render } from '@testing-library/react';\nimport TestContext from './TestContext';\n/**\n * render with react-testing library adding redux context for unit test.\n * @example\n * const { dispatch, reduxStore, ...otherReactTestingLibraryHelper } = renderWithRedux(\n *     <TestedComponent />,\n *     initialState\n * );\n *\n * @param {ReactNode} component: The component you want to test in jsx\n * @param {Object} initialState: Optional initial state of the redux store\n * @param {Object} options: Render options, e.g. to use a custom container element\n * @return {{ dispatch, reduxStore, ...rest }} helper function to test rendered component.\n * Same as @testing-library/react render method with added dispatch and reduxStore helper\n * dispatch: spy on the redux stroe dispatch method\n * reduxStore: the redux store used by the tested component\n */\n\nexport default (function (component, initialState, options) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var dispatch;\n  var reduxStore;\n  var renderResult = render(React.createElement(TestContext, {\n    initialState: initialState,\n    enableReducers: true\n  }, function (_a) {\n    var store = _a.store;\n    dispatch = jest.spyOn(store, 'dispatch');\n    reduxStore = store;\n    return component;\n  }), options);\n  return __assign(__assign({}, renderResult), {\n    rerender: function (newComponent) {\n      return renderResult.rerender(React.createElement(TestContext, {\n        initialState: initialState,\n        enableReducers: true\n      }, function (_a) {\n        var store = _a.store;\n        dispatch = jest.spyOn(store, 'dispatch');\n        reduxStore = store;\n        return newComponent;\n      }));\n    },\n    dispatch: dispatch,\n    reduxStore: reduxStore\n  });\n});","map":{"version":3,"sources":["/node_modules/ra-core/esm/util/renderWithRedux.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","render","TestContext","component","initialState","options","dispatch","reduxStore","renderResult","createElement","enableReducers","_a","store","jest","spyOn","rerender","newComponent"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAO,KAAKO,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;;;;;;;;;;;;;;;;;AAgBA,gBAAgB,UAAUC,SAAV,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C;AACxD,MAAID,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,IAAAA,YAAY,GAAG,EAAf;AAAoB;;AACnD,MAAIC,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIC,QAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,YAAY,GAAGP,MAAM,CAACD,KAAK,CAACS,aAAN,CAAoBP,WAApB,EAAiC;AAAEE,IAAAA,YAAY,EAAEA,YAAhB;AAA8BM,IAAAA,cAAc,EAAE;AAA9C,GAAjC,EAAuF,UAAUC,EAAV,EAAc;AAC3H,QAAIC,KAAK,GAAGD,EAAE,CAACC,KAAf;AACAN,IAAAA,QAAQ,GAAGO,IAAI,CAACC,KAAL,CAAWF,KAAX,EAAkB,UAAlB,CAAX;AACAL,IAAAA,UAAU,GAAGK,KAAb;AACA,WAAOT,SAAP;AACH,GALyB,CAAD,EAKrBE,OALqB,CAAzB;AAMA,SAAOnB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsB,YAAL,CAAT,EAA6B;AAAEO,IAAAA,QAAQ,EAAE,UAAUC,YAAV,EAAwB;AACxE,aAAOR,YAAY,CAACO,QAAb,CAAsBf,KAAK,CAACS,aAAN,CAAoBP,WAApB,EAAiC;AAAEE,QAAAA,YAAY,EAAEA,YAAhB;AAA8BM,QAAAA,cAAc,EAAE;AAA9C,OAAjC,EAAuF,UAAUC,EAAV,EAAc;AAC9H,YAAIC,KAAK,GAAGD,EAAE,CAACC,KAAf;AACAN,QAAAA,QAAQ,GAAGO,IAAI,CAACC,KAAL,CAAWF,KAAX,EAAkB,UAAlB,CAAX;AACAL,QAAAA,UAAU,GAAGK,KAAb;AACA,eAAOI,YAAP;AACH,OAL4B,CAAtB,CAAP;AAMH,KAPuC;AAOrCV,IAAAA,QAAQ,EAAEA,QAP2B;AAQxCC,IAAAA,UAAU,EAAEA;AAR4B,GAA7B,CAAf;AASH,CApBD","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { render } from '@testing-library/react';\nimport TestContext from './TestContext';\n/**\n * render with react-testing library adding redux context for unit test.\n * @example\n * const { dispatch, reduxStore, ...otherReactTestingLibraryHelper } = renderWithRedux(\n *     <TestedComponent />,\n *     initialState\n * );\n *\n * @param {ReactNode} component: The component you want to test in jsx\n * @param {Object} initialState: Optional initial state of the redux store\n * @param {Object} options: Render options, e.g. to use a custom container element\n * @return {{ dispatch, reduxStore, ...rest }} helper function to test rendered component.\n * Same as @testing-library/react render method with added dispatch and reduxStore helper\n * dispatch: spy on the redux stroe dispatch method\n * reduxStore: the redux store used by the tested component\n */\nexport default (function (component, initialState, options) {\n    if (initialState === void 0) { initialState = {}; }\n    if (options === void 0) { options = {}; }\n    var dispatch;\n    var reduxStore;\n    var renderResult = render(React.createElement(TestContext, { initialState: initialState, enableReducers: true }, function (_a) {\n        var store = _a.store;\n        dispatch = jest.spyOn(store, 'dispatch');\n        reduxStore = store;\n        return component;\n    }), options);\n    return __assign(__assign({}, renderResult), { rerender: function (newComponent) {\n            return renderResult.rerender(React.createElement(TestContext, { initialState: initialState, enableReducers: true }, function (_a) {\n                var store = _a.store;\n                dispatch = jest.spyOn(store, 'dispatch');\n                reduxStore = store;\n                return newComponent;\n            }));\n        }, dispatch: dispatch,\n        reduxStore: reduxStore });\n});\n"]},"metadata":{},"sourceType":"module"}