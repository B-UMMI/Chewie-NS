{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the result of the useListController() hook.\n *\n * Use the useListContext() hook to read the context. That's what many\n * List components do in react-admn (e.g. <Datagrid>, <Filter>, <Pagination>).\n *\n * @typedef {Object} ListControllerProps\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g [123, 456, ...]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  loaded boolean that is false until the data is available\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hidefilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selcted rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   basePath deduced from the location, useful for action buttons\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListControllerProps} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContext.Provider value={controllerProps}>\n *             ...\n *         </ListContext.Provider>\n *     );\n * };\n */\n\nvar ListContext = createContext({\n  basePath: null,\n  currentSort: null,\n  data: null,\n  defaultTitle: null,\n  displayedFilters: null,\n  filterValues: null,\n  hasCreate: null,\n  hideFilter: null,\n  ids: null,\n  loaded: null,\n  loading: null,\n  onSelect: null,\n  onToggleItem: null,\n  onUnselectItems: null,\n  page: null,\n  perPage: null,\n  resource: null,\n  selectedIds: null,\n  setFilters: null,\n  setPage: null,\n  setPerPage: null,\n  setSort: null,\n  showFilter: null,\n  total: null\n});\nListContext.displayName = 'ListContext';\nexport default ListContext;","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/ListContext.js"],"names":["createContext","ListContext","basePath","currentSort","data","defaultTitle","displayedFilters","filterValues","hasCreate","hideFilter","ids","loaded","loading","onSelect","onToggleItem","onUnselectItems","page","perPage","resource","selectedIds","setFilters","setPage","setPerPage","setSort","showFilter","total","displayName"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,IAAIC,WAAW,GAAGD,aAAa,CAAC;AAC5BE,EAAAA,QAAQ,EAAE,IADkB;AAE5BC,EAAAA,WAAW,EAAE,IAFe;AAG5BC,EAAAA,IAAI,EAAE,IAHsB;AAI5BC,EAAAA,YAAY,EAAE,IAJc;AAK5BC,EAAAA,gBAAgB,EAAE,IALU;AAM5BC,EAAAA,YAAY,EAAE,IANc;AAO5BC,EAAAA,SAAS,EAAE,IAPiB;AAQ5BC,EAAAA,UAAU,EAAE,IARgB;AAS5BC,EAAAA,GAAG,EAAE,IATuB;AAU5BC,EAAAA,MAAM,EAAE,IAVoB;AAW5BC,EAAAA,OAAO,EAAE,IAXmB;AAY5BC,EAAAA,QAAQ,EAAE,IAZkB;AAa5BC,EAAAA,YAAY,EAAE,IAbc;AAc5BC,EAAAA,eAAe,EAAE,IAdW;AAe5BC,EAAAA,IAAI,EAAE,IAfsB;AAgB5BC,EAAAA,OAAO,EAAE,IAhBmB;AAiB5BC,EAAAA,QAAQ,EAAE,IAjBkB;AAkB5BC,EAAAA,WAAW,EAAE,IAlBe;AAmB5BC,EAAAA,UAAU,EAAE,IAnBgB;AAoB5BC,EAAAA,OAAO,EAAE,IApBmB;AAqB5BC,EAAAA,UAAU,EAAE,IArBgB;AAsB5BC,EAAAA,OAAO,EAAE,IAtBmB;AAuB5BC,EAAAA,UAAU,EAAE,IAvBgB;AAwB5BC,EAAAA,KAAK,EAAE;AAxBqB,CAAD,CAA/B;AA0BAxB,WAAW,CAACyB,WAAZ,GAA0B,aAA1B;AACA,eAAezB,WAAf","sourcesContent":["import { createContext } from 'react';\n/**\n * Context to store the result of the useListController() hook.\n *\n * Use the useListContext() hook to read the context. That's what many\n * List components do in react-admn (e.g. <Datagrid>, <Filter>, <Pagination>).\n *\n * @typedef {Object} ListControllerProps\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g [123, 456, ...]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  loaded boolean that is false until the data is available\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hidefilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selcted rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   basePath deduced from the location, useful for action buttons\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListControllerProps} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContext.Provider value={controllerProps}>\n *             ...\n *         </ListContext.Provider>\n *     );\n * };\n */\nvar ListContext = createContext({\n    basePath: null,\n    currentSort: null,\n    data: null,\n    defaultTitle: null,\n    displayedFilters: null,\n    filterValues: null,\n    hasCreate: null,\n    hideFilter: null,\n    ids: null,\n    loaded: null,\n    loading: null,\n    onSelect: null,\n    onToggleItem: null,\n    onUnselectItems: null,\n    page: null,\n    perPage: null,\n    resource: null,\n    selectedIds: null,\n    setFilters: null,\n    setPage: null,\n    setPerPage: null,\n    setSort: null,\n    showFilter: null,\n    total: null,\n});\nListContext.displayName = 'ListContext';\nexport default ListContext;\n"]},"metadata":{},"sourceType":"module"}