{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n'use strict';\n\nexports.match = matchQuery;\nexports.parse = parseQuery; // -----------------------------------------------------------------------------\n\nvar RE_MEDIA_QUERY = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,\n    RE_MQ_EXPRESSION = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,\n    RE_MQ_FEATURE = /^(?:(min|max)-)?(.+)/,\n    RE_LENGTH_UNIT = /(em|rem|px|cm|mm|in|pt|pc)?$/,\n    RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\n\nfunction matchQuery(mediaQuery, values) {\n  return parseQuery(mediaQuery).some(function (query) {\n    var inverse = query.inverse; // Either the parsed or specified `type` is \"all\", or the types must be\n    // equal for a match.\n\n    var typeMatch = query.type === 'all' || values.type === query.type; // Quit early when `type` doesn't match, but take \"not\" into account.\n\n    if (typeMatch && inverse || !(typeMatch || inverse)) {\n      return false;\n    }\n\n    var expressionsMatch = query.expressions.every(function (expression) {\n      var feature = expression.feature,\n          modifier = expression.modifier,\n          expValue = expression.value,\n          value = values[feature]; // Missing or falsy values don't match.\n\n      if (!value) {\n        return false;\n      }\n\n      switch (feature) {\n        case 'orientation':\n        case 'scan':\n          return value.toLowerCase() === expValue.toLowerCase();\n\n        case 'width':\n        case 'height':\n        case 'device-width':\n        case 'device-height':\n          expValue = toPx(expValue);\n          value = toPx(value);\n          break;\n\n        case 'resolution':\n          expValue = toDpi(expValue);\n          value = toDpi(value);\n          break;\n\n        case 'aspect-ratio':\n        case 'device-aspect-ratio':\n        case\n        /* Deprecated */\n        'device-pixel-ratio':\n          expValue = toDecimal(expValue);\n          value = toDecimal(value);\n          break;\n\n        case 'grid':\n        case 'color':\n        case 'color-index':\n        case 'monochrome':\n          expValue = parseInt(expValue, 10) || 1;\n          value = parseInt(value, 10) || 0;\n          break;\n      }\n\n      switch (modifier) {\n        case 'min':\n          return value >= expValue;\n\n        case 'max':\n          return value <= expValue;\n\n        default:\n          return value === expValue;\n      }\n    });\n    return expressionsMatch && !inverse || !expressionsMatch && inverse;\n  });\n}\n\nfunction parseQuery(mediaQuery) {\n  return mediaQuery.split(',').map(function (query) {\n    query = query.trim();\n    var captures = query.match(RE_MEDIA_QUERY),\n        modifier = captures[1],\n        type = captures[2],\n        expressions = captures[3] || '',\n        parsed = {};\n    parsed.inverse = !!modifier && modifier.toLowerCase() === 'not';\n    parsed.type = type ? type.toLowerCase() : 'all'; // Split expressions into a list.\n\n    expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n    parsed.expressions = expressions.map(function (expression) {\n      var captures = expression.match(RE_MQ_EXPRESSION),\n          feature = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n      return {\n        modifier: feature[1],\n        feature: feature[2],\n        value: captures[2]\n      };\n    });\n    return parsed;\n  });\n} // -- Utilities ----------------------------------------------------------------\n\n\nfunction toDecimal(ratio) {\n  var decimal = Number(ratio),\n      numbers;\n\n  if (!decimal) {\n    numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n    decimal = numbers[1] / numbers[2];\n  }\n\n  return decimal;\n}\n\nfunction toDpi(resolution) {\n  var value = parseFloat(resolution),\n      units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n\n  switch (units) {\n    case 'dpcm':\n      return value / 2.54;\n\n    case 'dppx':\n      return value * 96;\n\n    default:\n      return value;\n  }\n}\n\nfunction toPx(length) {\n  var value = parseFloat(length),\n      units = String(length).match(RE_LENGTH_UNIT)[1];\n\n  switch (units) {\n    case 'em':\n      return value * 16;\n\n    case 'rem':\n      return value * 16;\n\n    case 'cm':\n      return value * 96 / 2.54;\n\n    case 'mm':\n      return value * 96 / 2.54 / 10;\n\n    case 'in':\n      return value * 96;\n\n    case 'pt':\n      return value * 72;\n\n    case 'pc':\n      return value * 72 / 12;\n\n    default:\n      return value;\n  }\n}","map":{"version":3,"sources":["/node_modules/css-mediaquery/index.js"],"names":["exports","match","matchQuery","parse","parseQuery","RE_MEDIA_QUERY","RE_MQ_EXPRESSION","RE_MQ_FEATURE","RE_LENGTH_UNIT","RE_RESOLUTION_UNIT","mediaQuery","values","some","query","inverse","typeMatch","type","expressionsMatch","expressions","every","expression","feature","modifier","expValue","value","toLowerCase","toPx","toDpi","toDecimal","parseInt","split","map","trim","captures","parsed","ratio","decimal","Number","numbers","resolution","parseFloat","units","String","length"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\nexports.match = matchQuery;\nexports.parse = parseQuery;\n\n// -----------------------------------------------------------------------------\n\nvar RE_MEDIA_QUERY     = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,\n    RE_MQ_EXPRESSION   = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,\n    RE_MQ_FEATURE      = /^(?:(min|max)-)?(.+)/,\n    RE_LENGTH_UNIT     = /(em|rem|px|cm|mm|in|pt|pc)?$/,\n    RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\n\nfunction matchQuery(mediaQuery, values) {\n    return parseQuery(mediaQuery).some(function (query) {\n        var inverse = query.inverse;\n\n        // Either the parsed or specified `type` is \"all\", or the types must be\n        // equal for a match.\n        var typeMatch = query.type === 'all' || values.type === query.type;\n\n        // Quit early when `type` doesn't match, but take \"not\" into account.\n        if ((typeMatch && inverse) || !(typeMatch || inverse)) {\n            return false;\n        }\n\n        var expressionsMatch = query.expressions.every(function (expression) {\n            var feature  = expression.feature,\n                modifier = expression.modifier,\n                expValue = expression.value,\n                value    = values[feature];\n\n            // Missing or falsy values don't match.\n            if (!value) { return false; }\n\n            switch (feature) {\n                case 'orientation':\n                case 'scan':\n                    return value.toLowerCase() === expValue.toLowerCase();\n\n                case 'width':\n                case 'height':\n                case 'device-width':\n                case 'device-height':\n                    expValue = toPx(expValue);\n                    value    = toPx(value);\n                    break;\n\n                case 'resolution':\n                    expValue = toDpi(expValue);\n                    value    = toDpi(value);\n                    break;\n\n                case 'aspect-ratio':\n                case 'device-aspect-ratio':\n                case /* Deprecated */ 'device-pixel-ratio':\n                    expValue = toDecimal(expValue);\n                    value    = toDecimal(value);\n                    break;\n\n                case 'grid':\n                case 'color':\n                case 'color-index':\n                case 'monochrome':\n                    expValue = parseInt(expValue, 10) || 1;\n                    value    = parseInt(value, 10) || 0;\n                    break;\n            }\n\n            switch (modifier) {\n                case 'min': return value >= expValue;\n                case 'max': return value <= expValue;\n                default   : return value === expValue;\n            }\n        });\n\n        return (expressionsMatch && !inverse) || (!expressionsMatch && inverse);\n    });\n}\n\nfunction parseQuery(mediaQuery) {\n    return mediaQuery.split(',').map(function (query) {\n        query = query.trim();\n\n        var captures    = query.match(RE_MEDIA_QUERY),\n            modifier    = captures[1],\n            type        = captures[2],\n            expressions = captures[3] || '',\n            parsed      = {};\n\n        parsed.inverse = !!modifier && modifier.toLowerCase() === 'not';\n        parsed.type    = type ? type.toLowerCase() : 'all';\n\n        // Split expressions into a list.\n        expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n\n        parsed.expressions = expressions.map(function (expression) {\n            var captures = expression.match(RE_MQ_EXPRESSION),\n                feature  = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n\n            return {\n                modifier: feature[1],\n                feature : feature[2],\n                value   : captures[2]\n            };\n        });\n\n        return parsed;\n    });\n}\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction toDecimal(ratio) {\n    var decimal = Number(ratio),\n        numbers;\n\n    if (!decimal) {\n        numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n        decimal = numbers[1] / numbers[2];\n    }\n\n    return decimal;\n}\n\nfunction toDpi(resolution) {\n    var value = parseFloat(resolution),\n        units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n\n    switch (units) {\n        case 'dpcm': return value / 2.54;\n        case 'dppx': return value * 96;\n        default    : return value;\n    }\n}\n\nfunction toPx(length) {\n    var value = parseFloat(length),\n        units = String(length).match(RE_LENGTH_UNIT)[1];\n\n    switch (units) {\n        case 'em' : return value * 16;\n        case 'rem': return value * 16;\n        case 'cm' : return value * 96 / 2.54;\n        case 'mm' : return value * 96 / 2.54 / 10;\n        case 'in' : return value * 96;\n        case 'pt' : return value * 72;\n        case 'pc' : return value * 72 / 12;\n        default   : return value;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}