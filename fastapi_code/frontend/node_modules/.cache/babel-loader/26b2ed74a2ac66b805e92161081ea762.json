{"ast":null,"code":"/**\n * Helper function for calling the dataProvider.getMany() method,\n * and getting a Promise for the records indexed by id in return.\n *\n * @example\n *     fetchRelatedRecords(dataProvider)(records, 'post_id', 'posts').then(posts =>\n *          posts.map(record => ({\n *              ...record,\n *              post_title: posts[record.post_id].title,\n *          }));\n */\nvar fetchRelatedRecords = function (dataProvider) {\n  return function (data, field, resource) {\n    return dataProvider.getMany(resource, {\n      ids: getRelatedIds(data, field)\n    }).then(function (_a) {\n      var data = _a.data;\n      return data.reduce(function (acc, post) {\n        acc[post.id] = post;\n        return acc;\n      }, {});\n    });\n  };\n};\n/**\n * Extracts, aggregates and deduplicates the ids of related records\n *\n * @example\n *     const books = [\n *         { id: 1, author_id: 123, title: 'Pride and Prejudice' },\n *         { id: 2, author_id: 123, title: 'Sense and Sensibility' },\n *         { id: 3, author_id: 456, title: 'War and Peace' },\n *     ];\n *     getRelatedIds(books, 'author_id'); => [123, 456]\n *\n * @example\n *     const books = [\n *         { id: 1, tag_ids: [1, 2], title: 'Pride and Prejudice' },\n *         { id: 2, tag_ids: [2, 3], title: 'Sense and Sensibility' },\n *         { id: 3, tag_ids: [4], title: 'War and Peace' },\n *     ];\n *     getRelatedIds(records, 'tag_ids'); => [1, 2, 3, 4]\n *\n * @param {Object[]} records An array of records\n * @param {string} field the identifier of the record field to use\n */\n\n\nexport var getRelatedIds = function (records, field) {\n  return Array.from(new Set(records.filter(function (record) {\n    return record[field] != null;\n  }).map(function (record) {\n    return record[field];\n  }).reduce(function (ids, value) {\n    return ids.concat(value);\n  }, [])));\n};\nexport default fetchRelatedRecords;","map":{"version":3,"sources":["/node_modules/ra-core/esm/export/fetchRelatedRecords.js"],"names":["fetchRelatedRecords","dataProvider","data","field","resource","getMany","ids","getRelatedIds","then","_a","reduce","acc","post","id","records","Array","from","Set","filter","record","map","value","concat"],"mappings":"AAAA;;;;;;;;;;;AAWA,IAAIA,mBAAmB,GAAG,UAAUC,YAAV,EAAwB;AAAE,SAAO,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,QAAvB,EAAiC;AACxF,WAAOH,YAAY,CACdI,OADE,CACMD,QADN,EACgB;AAAEE,MAAAA,GAAG,EAAEC,aAAa,CAACL,IAAD,EAAOC,KAAP;AAApB,KADhB,EAEFK,IAFE,CAEG,UAAUC,EAAV,EAAc;AACpB,UAAIP,IAAI,GAAGO,EAAE,CAACP,IAAd;AACA,aAAOA,IAAI,CAACQ,MAAL,CAAY,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACpCD,QAAAA,GAAG,CAACC,IAAI,CAACC,EAAN,CAAH,GAAeD,IAAf;AACA,eAAOD,GAAP;AACH,OAHM,EAGJ,EAHI,CAAP;AAIH,KARM,CAAP;AASH,GAVmD;AAUhD,CAVJ;AAWA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAIJ,aAAa,GAAG,UAAUO,OAAV,EAAmBX,KAAnB,EAA0B;AACjD,SAAOY,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQH,OAAO,CAC5BI,MADqB,CACd,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAAChB,KAAD,CAAN,IAAiB,IAAxB;AAA+B,GADrC,EAErBiB,GAFqB,CAEjB,UAAUD,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAAChB,KAAD,CAAb;AAAuB,GAF1B,EAGrBO,MAHqB,CAGd,UAAUJ,GAAV,EAAee,KAAf,EAAsB;AAAE,WAAOf,GAAG,CAACgB,MAAJ,CAAWD,KAAX,CAAP;AAA2B,GAHrC,EAGuC,EAHvC,CAAR,CAAX,CAAP;AAIH,CALM;AAMP,eAAerB,mBAAf","sourcesContent":["/**\n * Helper function for calling the dataProvider.getMany() method,\n * and getting a Promise for the records indexed by id in return.\n *\n * @example\n *     fetchRelatedRecords(dataProvider)(records, 'post_id', 'posts').then(posts =>\n *          posts.map(record => ({\n *              ...record,\n *              post_title: posts[record.post_id].title,\n *          }));\n */\nvar fetchRelatedRecords = function (dataProvider) { return function (data, field, resource) {\n    return dataProvider\n        .getMany(resource, { ids: getRelatedIds(data, field) })\n        .then(function (_a) {\n        var data = _a.data;\n        return data.reduce(function (acc, post) {\n            acc[post.id] = post;\n            return acc;\n        }, {});\n    });\n}; };\n/**\n * Extracts, aggregates and deduplicates the ids of related records\n *\n * @example\n *     const books = [\n *         { id: 1, author_id: 123, title: 'Pride and Prejudice' },\n *         { id: 2, author_id: 123, title: 'Sense and Sensibility' },\n *         { id: 3, author_id: 456, title: 'War and Peace' },\n *     ];\n *     getRelatedIds(books, 'author_id'); => [123, 456]\n *\n * @example\n *     const books = [\n *         { id: 1, tag_ids: [1, 2], title: 'Pride and Prejudice' },\n *         { id: 2, tag_ids: [2, 3], title: 'Sense and Sensibility' },\n *         { id: 3, tag_ids: [4], title: 'War and Peace' },\n *     ];\n *     getRelatedIds(records, 'tag_ids'); => [1, 2, 3, 4]\n *\n * @param {Object[]} records An array of records\n * @param {string} field the identifier of the record field to use\n */\nexport var getRelatedIds = function (records, field) {\n    return Array.from(new Set(records\n        .filter(function (record) { return record[field] != null; })\n        .map(function (record) { return record[field]; })\n        .reduce(function (ids, value) { return ids.concat(value); }, [])));\n};\nexport default fetchRelatedRecords;\n"]},"metadata":{},"sourceType":"module"}