{"ast":null,"code":"import { useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport useReferenceArrayInputController from './useReferenceArrayInputController';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getMatching()` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\n\nvar ReferenceArrayInputController = function (_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      _b = _a.filter,\n      filter = _b === void 0 ? {} : _b,\n      input = _a.input,\n      _c = _a.filterToQuery,\n      filterToQuery = _c === void 0 ? function (searchText) {\n    return {\n      q: searchText\n    };\n  } : _c,\n      _d = _a.perPage,\n      perPage = _d === void 0 ? 25 : _d,\n      reference = _a.reference,\n      resource = _a.resource,\n      _e = _a.sort,\n      sort = _e === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _e,\n      source = _a.source;\n\n  var _f = useReferenceArrayInputController({\n    basePath: basePath,\n    filter: filter,\n    filterToQuery: filterToQuery,\n    input: input,\n    perPage: perPage,\n    sort: sort,\n    reference: reference,\n    resource: resource,\n    source: source\n  }),\n      choices = _f.choices,\n      error = _f.error,\n      loaded = _f.loaded,\n      loading = _f.loading,\n      setFilter = _f.setFilter,\n      setPagination = _f.setPagination,\n      setSort = _f.setSort,\n      warning = _f.warning;\n\n  var debouncedSetFilter = useCallback(debounce(setFilter, 500), [setFilter]);\n  return children({\n    choices: choices,\n    error: error,\n    loaded: loaded,\n    loading: loading,\n    setFilter: debouncedSetFilter,\n    setPagination: setPagination,\n    setSort: setSort,\n    warning: warning\n  });\n};\n\nexport default ReferenceArrayInputController;","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/input/ReferenceArrayInputController.js"],"names":["useCallback","debounce","useReferenceArrayInputController","ReferenceArrayInputController","_a","basePath","children","_b","filter","input","_c","filterToQuery","searchText","q","_d","perPage","reference","resource","_e","sort","field","order","source","_f","choices","error","loaded","loading","setFilter","setPagination","setSort","warning","debouncedSetFilter"],"mappings":"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","sourcesContent":["import { useCallback, } from 'react';\nimport debounce from 'lodash/debounce';\nimport useReferenceArrayInputController from './useReferenceArrayInputController';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getMatching()` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\nvar ReferenceArrayInputController = function (_a) {\n    var basePath = _a.basePath, children = _a.children, _b = _a.filter, filter = _b === void 0 ? {} : _b, input = _a.input, _c = _a.filterToQuery, filterToQuery = _c === void 0 ? function (searchText) { return ({ q: searchText }); } : _c, _d = _a.perPage, perPage = _d === void 0 ? 25 : _d, reference = _a.reference, resource = _a.resource, _e = _a.sort, sort = _e === void 0 ? { field: 'id', order: 'DESC' } : _e, source = _a.source;\n    var _f = useReferenceArrayInputController({\n        basePath: basePath,\n        filter: filter,\n        filterToQuery: filterToQuery,\n        input: input,\n        perPage: perPage,\n        sort: sort,\n        reference: reference,\n        resource: resource,\n        source: source,\n    }), choices = _f.choices, error = _f.error, loaded = _f.loaded, loading = _f.loading, setFilter = _f.setFilter, setPagination = _f.setPagination, setSort = _f.setSort, warning = _f.warning;\n    var debouncedSetFilter = useCallback(debounce(setFilter, 500), [\n        setFilter,\n    ]);\n    return children({\n        choices: choices,\n        error: error,\n        loaded: loaded,\n        loading: loading,\n        setFilter: debouncedSetFilter,\n        setPagination: setPagination,\n        setSort: setSort,\n        warning: warning,\n    });\n};\nexport default ReferenceArrayInputController;\n"]},"metadata":{},"sourceType":"module"}