{"ast":null,"code":"import merge from 'lodash/merge';\n/**\n * Because final-form removes undefined and empty string values completely\n * (the key for the empty field is removed from the values), we have to check\n * whether this value was initially provided so that it is correctly sent to\n * the backend.\n * @see https://github.com/final-form/react-final-form/issues/130#issuecomment-493447888\n *\n * @param initialValues The initial values provided to the form\n * @param values The current form values\n */\n\nvar sanitizeEmptyValues = function (initialValues, values) {\n  // For every field initially provided, we check whether it value has been removed\n  // and set it explicitly to an empty string\n  if (!initialValues) return values;\n  var initialValuesWithEmptyFields = Object.keys(initialValues).reduce(function (acc, key) {\n    if (values[key] instanceof Date) {\n      acc[key] = values[key];\n    } else if (Array.isArray(values[key])) {\n      if (Array.isArray(initialValues[key])) {\n        acc[key] = values[key].map(function (value, index) {\n          return sanitizeEmptyValues(initialValues[key][index], value);\n        });\n      } else {\n        acc[key] = values[key];\n      }\n    } else if (typeof values[key] === 'object' && typeof initialValues[key] === 'object' && values[key] !== null) {\n      acc[key] = sanitizeEmptyValues(initialValues[key], values[key]);\n    } else {\n      acc[key] = typeof values[key] === 'undefined' ? null : values[key];\n    }\n\n    return acc;\n  }, {}); // Finally, we merge back the values to not miss any which wasn't initially provided\n\n  return merge(initialValuesWithEmptyFields, values);\n};\n\nexport default sanitizeEmptyValues;","map":{"version":3,"sources":["/node_modules/ra-core/esm/form/sanitizeEmptyValues.js"],"names":["merge","sanitizeEmptyValues","initialValues","values","initialValuesWithEmptyFields","Object","keys","reduce","acc","key","Date","Array","isArray","map","value","index"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA;;;;;;;;;;;AAUA,IAAIC,mBAAmB,GAAG,UAAUC,aAAV,EAAyBC,MAAzB,EAAiC;AACvD;AACA;AACA,MAAI,CAACD,aAAL,EACI,OAAOC,MAAP;AACJ,MAAIC,4BAA4B,GAAGC,MAAM,CAACC,IAAP,CAAYJ,aAAZ,EAA2BK,MAA3B,CAAkC,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACrF,QAAIN,MAAM,CAACM,GAAD,CAAN,YAAuBC,IAA3B,EAAiC;AAC7BF,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWN,MAAM,CAACM,GAAD,CAAjB;AACH,KAFD,MAGK,IAAIE,KAAK,CAACC,OAAN,CAAcT,MAAM,CAACM,GAAD,CAApB,CAAJ,EAAgC;AACjC,UAAIE,KAAK,CAACC,OAAN,CAAcV,aAAa,CAACO,GAAD,CAA3B,CAAJ,EAAuC;AACnCD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWN,MAAM,CAACM,GAAD,CAAN,CAAYI,GAAZ,CAAgB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAC/C,iBAAOd,mBAAmB,CAACC,aAAa,CAACO,GAAD,CAAb,CAAmBM,KAAnB,CAAD,EAA4BD,KAA5B,CAA1B;AACH,SAFU,CAAX;AAGH,OAJD,MAKK;AACDN,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWN,MAAM,CAACM,GAAD,CAAjB;AACH;AACJ,KATI,MAUA,IAAI,OAAON,MAAM,CAACM,GAAD,CAAb,KAAuB,QAAvB,IACL,OAAOP,aAAa,CAACO,GAAD,CAApB,KAA8B,QADzB,IAELN,MAAM,CAACM,GAAD,CAAN,KAAgB,IAFf,EAEqB;AACtBD,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWR,mBAAmB,CAACC,aAAa,CAACO,GAAD,CAAd,EAAqBN,MAAM,CAACM,GAAD,CAA3B,CAA9B;AACH,KAJI,MAKA;AACDD,MAAAA,GAAG,CAACC,GAAD,CAAH,GACI,OAAON,MAAM,CAACM,GAAD,CAAb,KAAuB,WAAvB,GAAqC,IAArC,GAA4CN,MAAM,CAACM,GAAD,CADtD;AAEH;;AACD,WAAOD,GAAP;AACH,GAxBkC,EAwBhC,EAxBgC,CAAnC,CALuD,CA8BvD;;AACA,SAAOR,KAAK,CAACI,4BAAD,EAA+BD,MAA/B,CAAZ;AACH,CAhCD;;AAiCA,eAAeF,mBAAf","sourcesContent":["import merge from 'lodash/merge';\n/**\n * Because final-form removes undefined and empty string values completely\n * (the key for the empty field is removed from the values), we have to check\n * whether this value was initially provided so that it is correctly sent to\n * the backend.\n * @see https://github.com/final-form/react-final-form/issues/130#issuecomment-493447888\n *\n * @param initialValues The initial values provided to the form\n * @param values The current form values\n */\nvar sanitizeEmptyValues = function (initialValues, values) {\n    // For every field initially provided, we check whether it value has been removed\n    // and set it explicitly to an empty string\n    if (!initialValues)\n        return values;\n    var initialValuesWithEmptyFields = Object.keys(initialValues).reduce(function (acc, key) {\n        if (values[key] instanceof Date) {\n            acc[key] = values[key];\n        }\n        else if (Array.isArray(values[key])) {\n            if (Array.isArray(initialValues[key])) {\n                acc[key] = values[key].map(function (value, index) {\n                    return sanitizeEmptyValues(initialValues[key][index], value);\n                });\n            }\n            else {\n                acc[key] = values[key];\n            }\n        }\n        else if (typeof values[key] === 'object' &&\n            typeof initialValues[key] === 'object' &&\n            values[key] !== null) {\n            acc[key] = sanitizeEmptyValues(initialValues[key], values[key]);\n        }\n        else {\n            acc[key] =\n                typeof values[key] === 'undefined' ? null : values[key];\n        }\n        return acc;\n    }, {});\n    // Finally, we merge back the values to not miss any which wasn't initially provided\n    return merge(initialValuesWithEmptyFields, values);\n};\nexport default sanitizeEmptyValues;\n"]},"metadata":{},"sourceType":"module"}