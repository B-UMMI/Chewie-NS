{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n\nvar sanitizeRestProps = function (_a) {\n  var basePath = _a.basePath,\n      className = _a.className,\n      record = _a.record,\n      hasShow = _a.hasShow,\n      hasList = _a.hasList,\n      resource = _a.resource,\n      rest = __rest(_a, [\"basePath\", \"className\", \"record\", \"hasShow\", \"hasList\", \"resource\"]);\n\n  return rest;\n};\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for a Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@material-ui/core/Button';\n *     import { TopToolbar, ShowButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = ({ basePath, record, resource }) => (\n *         <TopToolbar>\n *             <ShowButton basePath={basePath} record={record} />\n *             // Add your custom actions here\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\n\n\nvar EditActions = function (_a) {\n  var basePath = _a.basePath,\n      className = _a.className,\n      data = _a.data,\n      hasShow = _a.hasShow,\n      rest = __rest(_a, [\"basePath\", \"className\", \"data\", \"hasShow\"]);\n\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasShow && React.createElement(ShowButton, {\n    basePath: basePath,\n    record: data\n  }));\n};\n\nEditActions.propTypes = {\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  data: PropTypes.object,\n  hasShow: PropTypes.bool,\n  resource: PropTypes.string\n};\nexport default EditActions;","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/detail/EditActions.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","PropTypes","ShowButton","TopToolbar","sanitizeRestProps","_a","basePath","className","record","hasShow","hasList","resource","rest","EditActions","data","createElement","propTypes","string","object","bool"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\nvar sanitizeRestProps = function (_a) {\n    var basePath = _a.basePath, className = _a.className, record = _a.record, hasShow = _a.hasShow, hasList = _a.hasList, resource = _a.resource, rest = __rest(_a, [\"basePath\", \"className\", \"record\", \"hasShow\", \"hasList\", \"resource\"]);\n    return rest;\n};\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for a Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@material-ui/core/Button';\n *     import { TopToolbar, ShowButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = ({ basePath, record, resource }) => (\n *         <TopToolbar>\n *             <ShowButton basePath={basePath} record={record} />\n *             // Add your custom actions here\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\nvar EditActions = function (_a) {\n    var basePath = _a.basePath, className = _a.className, data = _a.data, hasShow = _a.hasShow, rest = __rest(_a, [\"basePath\", \"className\", \"data\", \"hasShow\"]);\n    return (React.createElement(TopToolbar, __assign({ className: className }, sanitizeRestProps(rest)), hasShow && React.createElement(ShowButton, { basePath: basePath, record: data })));\n};\nEditActions.propTypes = {\n    basePath: PropTypes.string,\n    className: PropTypes.string,\n    data: PropTypes.object,\n    hasShow: PropTypes.bool,\n    resource: PropTypes.string,\n};\nexport default EditActions;\n"]},"metadata":{},"sourceType":"module"}