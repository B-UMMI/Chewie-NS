{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\n\nexport var NumberField = memo(function (_a) {\n  var className = _a.className,\n      emptyText = _a.emptyText,\n      record = _a.record,\n      source = _a.source,\n      locales = _a.locales,\n      options = _a.options,\n      textAlign = _a.textAlign,\n      rest = __rest(_a, [\"className\", \"emptyText\", \"record\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n\n  if (!record) {\n    return null;\n  }\n\n  var value = get(record, source);\n\n  if (value == null) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeRestProps(rest)), emptyText) : null;\n  }\n\n  return React.createElement(Typography, __assign({\n    variant: \"body2\",\n    component: \"span\",\n    className: className\n  }, sanitizeRestProps(rest)), hasNumberFormat ? value.toLocaleString(locales, options) : value);\n}); // what? TypeScript looses the displayName if we don't set it explicitly\n\nNumberField.displayName = 'NumberField';\nNumberField.defaultProps = {\n  addLabel: true,\n  textAlign: 'right'\n};\nNumberField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object\n});\nexport default NumberField;","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/field/NumberField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","memo","PropTypes","get","Typography","sanitizeRestProps","fieldPropTypes","hasNumberFormat","Intl","NumberFormat","NumberField","_a","className","emptyText","record","source","locales","options","textAlign","rest","value","createElement","component","variant","toLocaleString","displayName","defaultProps","addLabel","propTypes","oneOfType","string","arrayOf","object"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\nvar hasNumberFormat = !!(typeof Intl === 'object' &&\n    Intl &&\n    typeof Intl.NumberFormat === 'function');\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport var NumberField = memo(function (_a) {\n    var className = _a.className, emptyText = _a.emptyText, record = _a.record, source = _a.source, locales = _a.locales, options = _a.options, textAlign = _a.textAlign, rest = __rest(_a, [\"className\", \"emptyText\", \"record\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n    if (!record) {\n        return null;\n    }\n    var value = get(record, source);\n    if (value == null) {\n        return emptyText ? (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeRestProps(rest)), emptyText)) : null;\n    }\n    return (React.createElement(Typography, __assign({ variant: \"body2\", component: \"span\", className: className }, sanitizeRestProps(rest)), hasNumberFormat\n        ? value.toLocaleString(locales, options)\n        : value));\n});\n// what? TypeScript looses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\nNumberField.defaultProps = {\n    addLabel: true,\n    textAlign: 'right',\n};\nNumberField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), { locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]), options: PropTypes.object });\nexport default NumberField;\n"]},"metadata":{},"sourceType":"module"}