{"ast":null,"code":"import inflection from 'inflection';\nimport useVersion from './useVersion';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport { useGetOne } from '../dataProvider';\nimport { useTranslate } from '../i18n';\nimport { useNotify, useRedirect, useRefresh } from '../sideEffect';\nimport { CRUD_GET_ONE } from '../actions';\n/**\n * Prepare data for the Show view\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = props => {\n *     const controllerProps = useShowController(props);\n *     return <ShowView {...controllerProps} {...props} />;\n * }\n */\n\nvar useShowController = function (props) {\n  useCheckMinimumRequiredProps('Show', ['basePath', 'resource'], props);\n  var basePath = props.basePath,\n      id = props.id,\n      resource = props.resource;\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var version = useVersion();\n\n  var _a = useGetOne(resource, id, {\n    action: CRUD_GET_ONE,\n    onFailure: function () {\n      notify('ra.notification.item_doesnt_exist', 'warning');\n      redirect('list', basePath);\n      refresh();\n    }\n  }),\n      record = _a.data,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var resourceName = translate(\"resources.\" + resource + \".name\", {\n    smart_count: 1,\n    _: inflection.humanize(inflection.singularize(resource))\n  });\n  var defaultTitle = translate('ra.page.show', {\n    name: \"\" + resourceName,\n    id: id,\n    record: record\n  });\n  return {\n    loading: loading,\n    loaded: loaded,\n    defaultTitle: defaultTitle,\n    resource: resource,\n    basePath: basePath,\n    record: record,\n    version: version\n  };\n};\n\nexport default useShowController;","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/useShowController.js"],"names":["inflection","useVersion","useCheckMinimumRequiredProps","useGetOne","useTranslate","useNotify","useRedirect","useRefresh","CRUD_GET_ONE","useShowController","props","basePath","id","resource","translate","notify","redirect","refresh","version","_a","action","onFailure","record","data","loading","loaded","resourceName","smart_count","_","humanize","singularize","defaultTitle","name"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,4BAAT,QAA6C,6BAA7C;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,QAAmD,eAAnD;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,iBAAiB,GAAG,UAAUC,KAAV,EAAiB;AACrCR,EAAAA,4BAA4B,CAAC,MAAD,EAAS,CAAC,UAAD,EAAa,UAAb,CAAT,EAAmCQ,KAAnC,CAA5B;AACA,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MAA+BC,EAAE,GAAGF,KAAK,CAACE,EAA1C;AAAA,MAA8CC,QAAQ,GAAGH,KAAK,CAACG,QAA/D;AACA,MAAIC,SAAS,GAAGV,YAAY,EAA5B;AACA,MAAIW,MAAM,GAAGV,SAAS,EAAtB;AACA,MAAIW,QAAQ,GAAGV,WAAW,EAA1B;AACA,MAAIW,OAAO,GAAGV,UAAU,EAAxB;AACA,MAAIW,OAAO,GAAGjB,UAAU,EAAxB;;AACA,MAAIkB,EAAE,GAAGhB,SAAS,CAACU,QAAD,EAAWD,EAAX,EAAe;AAC7BQ,IAAAA,MAAM,EAAEZ,YADqB;AAE7Ba,IAAAA,SAAS,EAAE,YAAY;AACnBN,MAAAA,MAAM,CAAC,mCAAD,EAAsC,SAAtC,CAAN;AACAC,MAAAA,QAAQ,CAAC,MAAD,EAASL,QAAT,CAAR;AACAM,MAAAA,OAAO;AACV;AAN4B,GAAf,CAAlB;AAAA,MAOIK,MAAM,GAAGH,EAAE,CAACI,IAPhB;AAAA,MAOsBC,OAAO,GAAGL,EAAE,CAACK,OAPnC;AAAA,MAO4CC,MAAM,GAAGN,EAAE,CAACM,MAPxD;;AAQA,MAAIC,YAAY,GAAGZ,SAAS,CAAC,eAAeD,QAAf,GAA0B,OAA3B,EAAoC;AAC5Dc,IAAAA,WAAW,EAAE,CAD+C;AAE5DC,IAAAA,CAAC,EAAE5B,UAAU,CAAC6B,QAAX,CAAoB7B,UAAU,CAAC8B,WAAX,CAAuBjB,QAAvB,CAApB;AAFyD,GAApC,CAA5B;AAIA,MAAIkB,YAAY,GAAGjB,SAAS,CAAC,cAAD,EAAiB;AACzCkB,IAAAA,IAAI,EAAE,KAAKN,YAD8B;AAEzCd,IAAAA,EAAE,EAAEA,EAFqC;AAGzCU,IAAAA,MAAM,EAAEA;AAHiC,GAAjB,CAA5B;AAKA,SAAO;AACHE,IAAAA,OAAO,EAAEA,OADN;AAEHC,IAAAA,MAAM,EAAEA,MAFL;AAGHM,IAAAA,YAAY,EAAEA,YAHX;AAIHlB,IAAAA,QAAQ,EAAEA,QAJP;AAKHF,IAAAA,QAAQ,EAAEA,QALP;AAMHW,IAAAA,MAAM,EAAEA,MANL;AAOHJ,IAAAA,OAAO,EAAEA;AAPN,GAAP;AASH,CAlCD;;AAmCA,eAAeT,iBAAf","sourcesContent":["import inflection from 'inflection';\nimport useVersion from './useVersion';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport { useGetOne } from '../dataProvider';\nimport { useTranslate } from '../i18n';\nimport { useNotify, useRedirect, useRefresh } from '../sideEffect';\nimport { CRUD_GET_ONE } from '../actions';\n/**\n * Prepare data for the Show view\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = props => {\n *     const controllerProps = useShowController(props);\n *     return <ShowView {...controllerProps} {...props} />;\n * }\n */\nvar useShowController = function (props) {\n    useCheckMinimumRequiredProps('Show', ['basePath', 'resource'], props);\n    var basePath = props.basePath, id = props.id, resource = props.resource;\n    var translate = useTranslate();\n    var notify = useNotify();\n    var redirect = useRedirect();\n    var refresh = useRefresh();\n    var version = useVersion();\n    var _a = useGetOne(resource, id, {\n        action: CRUD_GET_ONE,\n        onFailure: function () {\n            notify('ra.notification.item_doesnt_exist', 'warning');\n            redirect('list', basePath);\n            refresh();\n        },\n    }), record = _a.data, loading = _a.loading, loaded = _a.loaded;\n    var resourceName = translate(\"resources.\" + resource + \".name\", {\n        smart_count: 1,\n        _: inflection.humanize(inflection.singularize(resource)),\n    });\n    var defaultTitle = translate('ra.page.show', {\n        name: \"\" + resourceName,\n        id: id,\n        record: record,\n    });\n    return {\n        loading: loading,\n        loaded: loaded,\n        defaultTitle: defaultTitle,\n        resource: resource,\n        basePath: basePath,\n        record: record,\n        version: version,\n    };\n};\nexport default useShowController;\n"]},"metadata":{},"sourceType":"module"}