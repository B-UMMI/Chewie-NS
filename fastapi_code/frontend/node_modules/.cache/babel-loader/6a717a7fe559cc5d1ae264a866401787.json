{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the data provider and pass the result to a child function\n *\n * @param {Function} children Must be a function which will be called with the mutate callback\n * @param {string} type The method called on the data provider, e.g. 'update', 'delete'. Can also be a custom method if the dataProvider supports is.\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} payload The payload object, e.g; { id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n *\n * @example\n *\n * const ApproveButton = ({ record }) => (\n *     <Mutation\n *         type=\"update\"\n *         resource=\"comments\"\n *         payload={{ id: record.id, data: { isApproved: true } }}\n *     >\n *         {approve => (\n *             <Button label=\"Approve\" onClick={approve} />\n *         )}\n *     </Mutation>\n * );\n */\n\nvar Mutation = function (_a) {\n  var children = _a.children,\n      type = _a.type,\n      resource = _a.resource,\n      payload = _a.payload,\n      options = _a.options;\n  return children.apply(void 0, useMutation({\n    type: type,\n    resource: resource,\n    payload: payload\n  }, __assign(__assign({}, options), {\n    withDeclarativeSideEffectsSupport: true\n  })));\n};\n\nexport default Mutation;","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/Mutation.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useMutation","Mutation","_a","children","type","resource","payload","options","withDeclarativeSideEffectsSupport"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,WAAP,MAAwB,eAAxB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIC,QAAQ,GAAG,UAAUC,EAAV,EAAc;AACzB,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,IAAI,GAAGF,EAAE,CAACE,IAAtC;AAAA,MAA4CC,QAAQ,GAAGH,EAAE,CAACG,QAA1D;AAAA,MAAoEC,OAAO,GAAGJ,EAAE,CAACI,OAAjF;AAAA,MAA0FC,OAAO,GAAGL,EAAE,CAACK,OAAvG;AACA,SAAOJ,QAAQ,CAACJ,KAAT,CAAe,KAAK,CAApB,EAAuBC,WAAW,CAAC;AAAEI,IAAAA,IAAI,EAAEA,IAAR;AAAcC,IAAAA,QAAQ,EAAEA,QAAxB;AAAkCC,IAAAA,OAAO,EAAEA;AAA3C,GAAD,EAAuDpB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKqB,OAAL,CAAT,EAAwB;AAAEC,IAAAA,iCAAiC,EAAE;AAArC,GAAxB,CAA/D,CAAlC,CAAP;AACH,CAHD;;AAIA,eAAeP,QAAf","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the data provider and pass the result to a child function\n *\n * @param {Function} children Must be a function which will be called with the mutate callback\n * @param {string} type The method called on the data provider, e.g. 'update', 'delete'. Can also be a custom method if the dataProvider supports is.\n * @param {string} resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} payload The payload object, e.g; { id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n *\n * @example\n *\n * const ApproveButton = ({ record }) => (\n *     <Mutation\n *         type=\"update\"\n *         resource=\"comments\"\n *         payload={{ id: record.id, data: { isApproved: true } }}\n *     >\n *         {approve => (\n *             <Button label=\"Approve\" onClick={approve} />\n *         )}\n *     </Mutation>\n * );\n */\nvar Mutation = function (_a) {\n    var children = _a.children, type = _a.type, resource = _a.resource, payload = _a.payload, options = _a.options;\n    return children.apply(void 0, useMutation({ type: type, resource: resource, payload: payload }, __assign(__assign({}, options), { withDeclarativeSideEffectsSupport: true })));\n};\nexport default Mutation;\n"]},"metadata":{},"sourceType":"module"}