{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, isValidElement, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport CardContentInner from '../layout/CardContentInner';\nimport Labeled from '../input/Labeled';\n\nvar sanitizeRestProps = function (_a) {\n  var children = _a.children,\n      className = _a.className,\n      record = _a.record,\n      resource = _a.resource,\n      basePath = _a.basePath,\n      version = _a.version,\n      initialValues = _a.initialValues,\n      translate = _a.translate,\n      rest = __rest(_a, [\"children\", \"className\", \"record\", \"resource\", \"basePath\", \"version\", \"initialValues\", \"translate\"]);\n\n  return rest;\n};\n/**\n * Simple Layout for a Show view, showing fields in one column.\n *\n * Receives the current `record` from the parent `<Show>` component,\n * and passes it to its childen. Children should be Field-like components.\n *\n * @example\n *     // in src/posts.js\n *     import * as React from \"react\";\n *     import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <SimpleShowLayout>\n *                 <TextField source=\"title\" />\n *             </SimpleShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import * as React from \"react\";\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\n\nvar SimpleShowLayout = function (_a) {\n  var basePath = _a.basePath,\n      className = _a.className,\n      children = _a.children,\n      record = _a.record,\n      resource = _a.resource,\n      version = _a.version,\n      rest = __rest(_a, [\"basePath\", \"className\", \"children\", \"record\", \"resource\", \"version\"]);\n\n  return React.createElement(CardContentInner, __assign({\n    className: className,\n    key: version\n  }, sanitizeRestProps(rest)), Children.map(children, function (field) {\n    return field && isValidElement(field) ? React.createElement(\"div\", {\n      key: field.props.source,\n      className: classnames(\"ra-field ra-field-\" + field.props.source, field.props.className)\n    }, field.props.addLabel ? React.createElement(Labeled, {\n      record: record,\n      resource: resource,\n      basePath: basePath,\n      label: field.props.label,\n      source: field.props.source,\n      disabled: false\n    }, field) : typeof field.type === 'string' ? field : cloneElement(field, {\n      record: record,\n      resource: resource,\n      basePath: basePath\n    })) : null;\n  }));\n};\n\nSimpleShowLayout.propTypes = {\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  version: PropTypes.number\n};\nexport default SimpleShowLayout;","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/detail/SimpleShowLayout.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","Children","isValidElement","cloneElement","PropTypes","classnames","CardContentInner","Labeled","sanitizeRestProps","_a","children","className","record","resource","basePath","version","initialValues","translate","rest","SimpleShowLayout","createElement","key","map","field","props","source","addLabel","label","disabled","type","propTypes","string","node","object","number"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { Children, isValidElement, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport CardContentInner from '../layout/CardContentInner';\nimport Labeled from '../input/Labeled';\nvar sanitizeRestProps = function (_a) {\n    var children = _a.children, className = _a.className, record = _a.record, resource = _a.resource, basePath = _a.basePath, version = _a.version, initialValues = _a.initialValues, translate = _a.translate, rest = __rest(_a, [\"children\", \"className\", \"record\", \"resource\", \"basePath\", \"version\", \"initialValues\", \"translate\"]);\n    return rest;\n};\n/**\n * Simple Layout for a Show view, showing fields in one column.\n *\n * Receives the current `record` from the parent `<Show>` component,\n * and passes it to its childen. Children should be Field-like components.\n *\n * @example\n *     // in src/posts.js\n *     import * as React from \"react\";\n *     import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <SimpleShowLayout>\n *                 <TextField source=\"title\" />\n *             </SimpleShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import * as React from \"react\";\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\nvar SimpleShowLayout = function (_a) {\n    var basePath = _a.basePath, className = _a.className, children = _a.children, record = _a.record, resource = _a.resource, version = _a.version, rest = __rest(_a, [\"basePath\", \"className\", \"children\", \"record\", \"resource\", \"version\"]);\n    return (React.createElement(CardContentInner, __assign({ className: className, key: version }, sanitizeRestProps(rest)), Children.map(children, function (field) {\n        return field && isValidElement(field) ? (React.createElement(\"div\", { key: field.props.source, className: classnames(\"ra-field ra-field-\" + field.props.source, field.props.className) }, field.props.addLabel ? (React.createElement(Labeled, { record: record, resource: resource, basePath: basePath, label: field.props.label, source: field.props.source, disabled: false }, field)) : typeof field.type === 'string' ? (field) : (cloneElement(field, {\n            record: record,\n            resource: resource,\n            basePath: basePath,\n        })))) : null;\n    })));\n};\nSimpleShowLayout.propTypes = {\n    basePath: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    record: PropTypes.object,\n    resource: PropTypes.string,\n    version: PropTypes.number,\n};\nexport default SimpleShowLayout;\n"]},"metadata":{},"sourceType":"module"}