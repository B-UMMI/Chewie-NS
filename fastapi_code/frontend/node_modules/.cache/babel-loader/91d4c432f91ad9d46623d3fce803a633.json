{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { useListController, getElementsFromRecords, InferredElement, ListContextProvider } from 'ra-core';\nimport ListView from './ListView';\nimport listFieldTypes from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\n\nvar ListGuesser = function (props) {\n  var controllerProps = useListController(props);\n  return React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListViewGuesser, __assign({}, props, controllerProps)));\n};\n\nvar ListViewGuesser = function (props) {\n  var ids = props.ids,\n      data = props.data,\n      resource = props.resource;\n\n  var _a = useState(null),\n      inferredChild = _a[0],\n      setInferredChild = _a[1];\n\n  useEffect(function () {\n    if (ids.length > 0 && data && !inferredChild) {\n      var inferredElements = getElementsFromRecords(ids.map(function (id) {\n        return data[id];\n      }), listFieldTypes);\n      var inferredChild_1 = new InferredElement(listFieldTypes.table, null, inferredElements);\n      process.env.NODE_ENV !== 'production' && // eslint-disable-next-line no-console\n      console.log(\"Guessed List:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"List = props => (\\n    <List {...props}>\\n\" + inferredChild_1.getRepresentation() + \"\\n    </List>\\n);\");\n      setInferredChild(inferredChild_1.getElement());\n    }\n  }, [data, ids, inferredChild, resource]);\n  return React.createElement(ListView, __assign({}, props), inferredChild);\n};\n\nListViewGuesser.propTypes = ListView.propTypes;\nexport default ListGuesser;","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/list/ListGuesser.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useState","useEffect","inflection","useListController","getElementsFromRecords","InferredElement","ListContextProvider","ListView","listFieldTypes","ListGuesser","props","controllerProps","createElement","value","ListViewGuesser","ids","data","resource","_a","inferredChild","setInferredChild","inferredElements","map","id","inferredChild_1","table","process","env","NODE_ENV","console","log","capitalize","singularize","getRepresentation","getElement","propTypes"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { useListController, getElementsFromRecords, InferredElement, ListContextProvider, } from 'ra-core';\nimport ListView from './ListView';\nimport listFieldTypes from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nvar ListGuesser = function (props) {\n    var controllerProps = useListController(props);\n    return (React.createElement(ListContextProvider, { value: controllerProps },\n        React.createElement(ListViewGuesser, __assign({}, props, controllerProps))));\n};\nvar ListViewGuesser = function (props) {\n    var ids = props.ids, data = props.data, resource = props.resource;\n    var _a = useState(null), inferredChild = _a[0], setInferredChild = _a[1];\n    useEffect(function () {\n        if (ids.length > 0 && data && !inferredChild) {\n            var inferredElements = getElementsFromRecords(ids.map(function (id) { return data[id]; }), listFieldTypes);\n            var inferredChild_1 = new InferredElement(listFieldTypes.table, null, inferredElements);\n            process.env.NODE_ENV !== 'production' &&\n                // eslint-disable-next-line no-console\n                console.log(\"Guessed List:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"List = props => (\\n    <List {...props}>\\n\" + inferredChild_1.getRepresentation() + \"\\n    </List>\\n);\");\n            setInferredChild(inferredChild_1.getElement());\n        }\n    }, [data, ids, inferredChild, resource]);\n    return React.createElement(ListView, __assign({}, props), inferredChild);\n};\nListViewGuesser.propTypes = ListView.propTypes;\nexport default ListGuesser;\n"]},"metadata":{},"sourceType":"module"}