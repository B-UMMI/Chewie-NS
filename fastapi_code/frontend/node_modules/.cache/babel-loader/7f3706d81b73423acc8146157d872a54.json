{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport pickBy from 'lodash/pickBy';\nvar defaultCacheDuration = 10 * 60 * 1000; // ten minutes\n\n/**\n * Returns a list of fetch dates by record id\n *\n * Given a list of new record ids and a previous list of fetch dates by record id,\n * add the new record ids at the current date,\n * and removes those among the old record ids that are stale.\n *\n * @param newRecordIds an array of record identifiers, e.g. [34, 56]\n * @param oldRecordFetchedAt the fetch dates of old records, e.g. { 12: new Date('12 minutes ago), 34: new Date('5 minutes ago') }\n * @param now Current time (useful for tests)\n * @param cacheDuration How long until an old record is removed from the list\n */\n\nvar getFetchedAt = function (newRecordIds, oldRecordFetchedAt, now, cacheDuration) {\n  if (newRecordIds === void 0) {\n    newRecordIds = [];\n  }\n\n  if (oldRecordFetchedAt === void 0) {\n    oldRecordFetchedAt = {};\n  }\n\n  if (now === void 0) {\n    now = new Date();\n  }\n\n  if (cacheDuration === void 0) {\n    cacheDuration = defaultCacheDuration;\n  } // prepare new records and timestamp them\n\n\n  var newFetchedAt = {};\n  newRecordIds.forEach(function (recordId) {\n    return newFetchedAt[recordId] = now;\n  }); // remove outdated entry\n\n  var latestValidDate = new Date();\n  latestValidDate.setTime(latestValidDate.getTime() - cacheDuration);\n  var stillValidFetchedAt = pickBy(oldRecordFetchedAt, function (date) {\n    return date > latestValidDate;\n  });\n  return __assign(__assign({}, stillValidFetchedAt), newFetchedAt);\n};\n\nexport default getFetchedAt;","map":{"version":3,"sources":["/node_modules/ra-core/esm/util/getFetchedAt.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","pickBy","defaultCacheDuration","getFetchedAt","newRecordIds","oldRecordFetchedAt","now","cacheDuration","Date","newFetchedAt","forEach","recordId","latestValidDate","setTime","getTime","stillValidFetchedAt","date"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,MAAP,MAAmB,eAAnB;AACA,IAAIC,oBAAoB,GAAG,KAAK,EAAL,GAAU,IAArC,C,CAA2C;;AAC3C;;;;;;;;;;;;;AAYA,IAAIC,YAAY,GAAG,UAAUC,YAAV,EAAwBC,kBAAxB,EAA4CC,GAA5C,EAAiDC,aAAjD,EAAgE;AAC/E,MAAIH,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,IAAAA,YAAY,GAAG,EAAf;AAAoB;;AACnD,MAAIC,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,IAAAA,kBAAkB,GAAG,EAArB;AAA0B;;AAC/D,MAAIC,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAAEA,IAAAA,GAAG,GAAG,IAAIE,IAAJ,EAAN;AAAmB;;AACzC,MAAID,aAAa,KAAK,KAAK,CAA3B,EAA8B;AAAEA,IAAAA,aAAa,GAAGL,oBAAhB;AAAuC,GAJQ,CAK/E;;;AACA,MAAIO,YAAY,GAAG,EAAnB;AACAL,EAAAA,YAAY,CAACM,OAAb,CAAqB,UAAUC,QAAV,EAAoB;AAAE,WAAQF,YAAY,CAACE,QAAD,CAAZ,GAAyBL,GAAjC;AAAwC,GAAnF,EAP+E,CAQ/E;;AACA,MAAIM,eAAe,GAAG,IAAIJ,IAAJ,EAAtB;AACAI,EAAAA,eAAe,CAACC,OAAhB,CAAwBD,eAAe,CAACE,OAAhB,KAA4BP,aAApD;AACA,MAAIQ,mBAAmB,GAAGd,MAAM,CAACI,kBAAD,EAAqB,UAAUW,IAAV,EAAgB;AAAE,WAAOA,IAAI,GAAGJ,eAAd;AAAgC,GAAvE,CAAhC;AACA,SAAOzB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4B,mBAAL,CAAT,EAAoCN,YAApC,CAAf;AACH,CAbD;;AAcA,eAAeN,YAAf","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport pickBy from 'lodash/pickBy';\nvar defaultCacheDuration = 10 * 60 * 1000; // ten minutes\n/**\n * Returns a list of fetch dates by record id\n *\n * Given a list of new record ids and a previous list of fetch dates by record id,\n * add the new record ids at the current date,\n * and removes those among the old record ids that are stale.\n *\n * @param newRecordIds an array of record identifiers, e.g. [34, 56]\n * @param oldRecordFetchedAt the fetch dates of old records, e.g. { 12: new Date('12 minutes ago), 34: new Date('5 minutes ago') }\n * @param now Current time (useful for tests)\n * @param cacheDuration How long until an old record is removed from the list\n */\nvar getFetchedAt = function (newRecordIds, oldRecordFetchedAt, now, cacheDuration) {\n    if (newRecordIds === void 0) { newRecordIds = []; }\n    if (oldRecordFetchedAt === void 0) { oldRecordFetchedAt = {}; }\n    if (now === void 0) { now = new Date(); }\n    if (cacheDuration === void 0) { cacheDuration = defaultCacheDuration; }\n    // prepare new records and timestamp them\n    var newFetchedAt = {};\n    newRecordIds.forEach(function (recordId) { return (newFetchedAt[recordId] = now); });\n    // remove outdated entry\n    var latestValidDate = new Date();\n    latestValidDate.setTime(latestValidDate.getTime() - cacheDuration);\n    var stillValidFetchedAt = pickBy(oldRecordFetchedAt, function (date) { return date > latestValidDate; });\n    return __assign(__assign({}, stillValidFetchedAt), newFetchedAt);\n};\nexport default getFetchedAt;\n"]},"metadata":{},"sourceType":"module"}