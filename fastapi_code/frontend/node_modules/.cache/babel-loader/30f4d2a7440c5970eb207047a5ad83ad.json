{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport useDataProvider from './useDataProvider';\nimport useVersion from '../controller/useVersion';\nimport getFetchType from './getFetchType';\nimport { useSafeSetState } from '../util/hooks';\n/**\n * Lists of records are initialized to a particular object,\n * so detecting if the list is empty requires some work.\n *\n * @see src/reducer/admin/data.ts\n */\n\nvar isEmptyList = function (data) {\n  return Array.isArray(data) ? data.length === 0 : data && Object.keys(data).length === 0 && data.hasOwnProperty('fetchedAt');\n};\n/**\n * Default cache selector. Allows to cache responses by default.\n *\n * By default, custom queries are dispatched as a CUSTOM_QUERY Redux action.\n * The useDataProvider hookdispatches a CUSTOM_QUERY_SUCCESS when the response\n * comes, and the customQueries reducer stores the result in the store.\n * This selector reads the customQueries store and acts as a response cache.\n */\n\n\nvar defaultDataSelector = function (query) {\n  return function (state) {\n    var key = JSON.stringify(__assign(__assign({}, query), {\n      type: getFetchType(query.type)\n    }));\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].data : undefined;\n  };\n};\n\nvar defaultTotalSelector = function (query) {\n  return function (state) {\n    var key = JSON.stringify(__assign(__assign({}, query), {\n      type: getFetchType(query.type)\n    }));\n    return state.admin.customQueries[key] ? state.admin.customQueries[key].total : null;\n  };\n};\n/**\n * Fetch the data provider through Redux, return the value from the store.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {Object} query\n * @param {string} query.type The verb passed to th data provider, e.g. 'getList', 'getOne'\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n * @param {Function} dataSelector Redux selector to get the result. Required.\n * @param {Function} totalSelector Redux selector to get the total (optional, only for LIST queries)\n *\n * @returns The current request state. Destructure as { data, total, error, loading, loaded }.\n *\n * @example\n *\n * import { useQueryWithStore } from 'react-admin';\n *\n * const UserProfile = ({ record }) => {\n *     const { data, loading, error } = useQueryWithStore(\n *         {\n *             type: 'getOne',\n *             resource: 'users',\n *             payload: { id: record.id }\n *         },\n *         {},\n *         state => state.admin.resources.users.data[record.id]\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <div>User {data.username}</div>;\n * };\n */\n\n\nvar useQueryWithStore = function (query, options, dataSelector, totalSelector) {\n  if (options === void 0) {\n    options = {\n      action: 'CUSTOM_QUERY'\n    };\n  }\n\n  if (dataSelector === void 0) {\n    dataSelector = defaultDataSelector(query);\n  }\n\n  if (totalSelector === void 0) {\n    totalSelector = defaultTotalSelector(query);\n  }\n\n  var type = query.type,\n      resource = query.resource,\n      payload = query.payload;\n  var version = useVersion(); // used to allow force reload\n\n  var requestSignature = JSON.stringify({\n    query: query,\n    options: options,\n    version: version\n  });\n  var requestSignatureRef = useRef(requestSignature);\n  var data = useSelector(dataSelector);\n  var total = useSelector(totalSelector);\n\n  var _a = useSafeSetState({\n    data: data,\n    total: total,\n    error: null,\n    loading: true,\n    loaded: data !== undefined && !isEmptyList(data)\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    if (requestSignatureRef.current !== requestSignature) {\n      // request has changed, reset the loading state\n      requestSignatureRef.current = requestSignature;\n      setState({\n        data: data,\n        total: total,\n        error: null,\n        loading: true,\n        loaded: data !== undefined && !isEmptyList(data)\n      });\n    } else if (!isEqual(state.data, data) || state.total !== total) {\n      // the dataProvider response arrived in the Redux store\n      if (typeof total !== 'undefined' && isNaN(total)) {\n        console.error('Total from response is not a number. Please check your dataProvider or the API.');\n      } else {\n        setState(function (prevState) {\n          return __assign(__assign({}, prevState), {\n            data: data,\n            total: total,\n            loaded: true\n          });\n        });\n      }\n    }\n  }, [data, requestSignature, setState, state.data, state.total, total]);\n  var dataProvider = useDataProvider();\n  useEffect(function () {\n    setState(function (prevState) {\n      return __assign(__assign({}, prevState), {\n        loading: true\n      });\n    });\n    dataProvider[type](resource, payload, options).then(function () {\n      // We don't care about the dataProvider response here, because\n      // it was already passed to SUCCESS reducers by the dataProvider\n      // hook, and the result is available from the Redux store\n      // through the data and total selectors.\n      // In addition, if the query is optimistic, the response\n      // will be empty, so it should not be used at all.\n      if (requestSignature !== requestSignatureRef.current) {\n        return;\n      }\n\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          error: null,\n          loading: false,\n          loaded: true\n        });\n      });\n    }).catch(function (error) {\n      if (requestSignature !== requestSignatureRef.current) {\n        return;\n      }\n\n      setState({\n        error: error,\n        loading: false,\n        loaded: false\n      });\n    }); // deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n  }, [requestSignature]); // eslint-disable-line\n\n  return state;\n};\n\nexport default useQueryWithStore;","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/useQueryWithStore.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useEffect","useRef","useSelector","isEqual","useDataProvider","useVersion","getFetchType","useSafeSetState","isEmptyList","data","Array","isArray","keys","defaultDataSelector","query","state","key","JSON","stringify","type","admin","customQueries","undefined","defaultTotalSelector","total","useQueryWithStore","options","dataSelector","totalSelector","action","resource","payload","version","requestSignature","requestSignatureRef","_a","error","loading","loaded","setState","current","isNaN","console","prevState","dataProvider","then","catch"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport useDataProvider from './useDataProvider';\nimport useVersion from '../controller/useVersion';\nimport getFetchType from './getFetchType';\nimport { useSafeSetState } from '../util/hooks';\n/**\n * Lists of records are initialized to a particular object,\n * so detecting if the list is empty requires some work.\n *\n * @see src/reducer/admin/data.ts\n */\nvar isEmptyList = function (data) {\n    return Array.isArray(data)\n        ? data.length === 0\n        : data &&\n            Object.keys(data).length === 0 &&\n            data.hasOwnProperty('fetchedAt');\n};\n/**\n * Default cache selector. Allows to cache responses by default.\n *\n * By default, custom queries are dispatched as a CUSTOM_QUERY Redux action.\n * The useDataProvider hookdispatches a CUSTOM_QUERY_SUCCESS when the response\n * comes, and the customQueries reducer stores the result in the store.\n * This selector reads the customQueries store and acts as a response cache.\n */\nvar defaultDataSelector = function (query) { return function (state) {\n    var key = JSON.stringify(__assign(__assign({}, query), { type: getFetchType(query.type) }));\n    return state.admin.customQueries[key]\n        ? state.admin.customQueries[key].data\n        : undefined;\n}; };\nvar defaultTotalSelector = function (query) { return function (state) {\n    var key = JSON.stringify(__assign(__assign({}, query), { type: getFetchType(query.type) }));\n    return state.admin.customQueries[key]\n        ? state.admin.customQueries[key].total\n        : null;\n}; };\n/**\n * Fetch the data provider through Redux, return the value from the store.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {Object} query\n * @param {string} query.type The verb passed to th data provider, e.g. 'getList', 'getOne'\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n * @param {Function} dataSelector Redux selector to get the result. Required.\n * @param {Function} totalSelector Redux selector to get the total (optional, only for LIST queries)\n *\n * @returns The current request state. Destructure as { data, total, error, loading, loaded }.\n *\n * @example\n *\n * import { useQueryWithStore } from 'react-admin';\n *\n * const UserProfile = ({ record }) => {\n *     const { data, loading, error } = useQueryWithStore(\n *         {\n *             type: 'getOne',\n *             resource: 'users',\n *             payload: { id: record.id }\n *         },\n *         {},\n *         state => state.admin.resources.users.data[record.id]\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <div>User {data.username}</div>;\n * };\n */\nvar useQueryWithStore = function (query, options, dataSelector, totalSelector) {\n    if (options === void 0) { options = { action: 'CUSTOM_QUERY' }; }\n    if (dataSelector === void 0) { dataSelector = defaultDataSelector(query); }\n    if (totalSelector === void 0) { totalSelector = defaultTotalSelector(query); }\n    var type = query.type, resource = query.resource, payload = query.payload;\n    var version = useVersion(); // used to allow force reload\n    var requestSignature = JSON.stringify({ query: query, options: options, version: version });\n    var requestSignatureRef = useRef(requestSignature);\n    var data = useSelector(dataSelector);\n    var total = useSelector(totalSelector);\n    var _a = useSafeSetState({\n        data: data,\n        total: total,\n        error: null,\n        loading: true,\n        loaded: data !== undefined && !isEmptyList(data),\n    }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        if (requestSignatureRef.current !== requestSignature) {\n            // request has changed, reset the loading state\n            requestSignatureRef.current = requestSignature;\n            setState({\n                data: data,\n                total: total,\n                error: null,\n                loading: true,\n                loaded: data !== undefined && !isEmptyList(data),\n            });\n        }\n        else if (!isEqual(state.data, data) || state.total !== total) {\n            // the dataProvider response arrived in the Redux store\n            if (typeof total !== 'undefined' && isNaN(total)) {\n                console.error('Total from response is not a number. Please check your dataProvider or the API.');\n            }\n            else {\n                setState(function (prevState) { return (__assign(__assign({}, prevState), { data: data,\n                    total: total, loaded: true })); });\n            }\n        }\n    }, [data, requestSignature, setState, state.data, state.total, total]);\n    var dataProvider = useDataProvider();\n    useEffect(function () {\n        setState(function (prevState) { return (__assign(__assign({}, prevState), { loading: true })); });\n        dataProvider[type](resource, payload, options)\n            .then(function () {\n            // We don't care about the dataProvider response here, because\n            // it was already passed to SUCCESS reducers by the dataProvider\n            // hook, and the result is available from the Redux store\n            // through the data and total selectors.\n            // In addition, if the query is optimistic, the response\n            // will be empty, so it should not be used at all.\n            if (requestSignature !== requestSignatureRef.current) {\n                return;\n            }\n            setState(function (prevState) { return (__assign(__assign({}, prevState), { error: null, loading: false, loaded: true })); });\n        })\n            .catch(function (error) {\n            if (requestSignature !== requestSignatureRef.current) {\n                return;\n            }\n            setState({\n                error: error,\n                loading: false,\n                loaded: false,\n            });\n        });\n        // deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    }, [requestSignature]); // eslint-disable-line\n    return state;\n};\nexport default useQueryWithStore;\n"]},"metadata":{},"sourceType":"module"}