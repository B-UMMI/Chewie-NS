{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback } from 'react';\nimport merge from 'lodash/merge';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Get a callback to fetch the data provider through Redux, usually for mutations.\n *\n * The request starts when the callback is called.\n *\n * useMutation() parameters can be passed:\n *\n * - at definition time\n *\n *       const [mutate] = useMutation(query, options); mutate();\n *\n * - at call time\n *\n *       const [mutate] = useMutation(); mutate(query, options);\n *\n * - both, in which case the definition and call time parameters are merged\n *\n *       const [mutate] = useMutation(query1, options1); mutate(query2, options2));\n *\n * @param {Object} query\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects (e.g. { onSuccess: { refresh: true } })\n *\n * @returns A tuple with the mutation callback and the request state. Destructure as [mutate, { data, total, error, loading, loaded }].\n *\n * The return value updates according to the request state:\n *\n * - mount:         [mutate, { loading: false, loaded: false }]\n * - mutate called: [mutate, { loading: true, loaded: false }]\n * - success:       [mutate, { data: [data from response], total: [total from response], loading: false, loaded: true }]\n * - error:         [mutate, { error: [error from response], loading: false, loaded: true }]\n *\n * The mutate function accepts the following arguments\n * - {Object} query\n * - {string} query.type The method called on the data provider, e.g. 'update'\n * - {string} query.resource A resource name, e.g. 'posts', 'comments'\n * - {Object} query.payload The payload object, e.g. { id: 123, data: { isApproved: true } }\n * - {Object} options\n * - {string} options.action Redux action type\n * - {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * - {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * - {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n * - {boolean} withDeclarativeSideEffectsSupport Set to true to support legacy side effects (e.g. { onSuccess: { refresh: true } })\n *\n * @example\n *\n * // pass parameters at definition time\n * // use when all parameters are determined at definition time\n * // the mutation callback can be used as an even handler\n * // because Event parameters are ignored\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [approve, { loading }] = useMutation({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: { id: record.id, data: { isApproved: true } }\n *     });\n *     return <Button label=\"Approve\" onClick={approve} disabled={loading} />;\n * };\n *\n * @example\n *\n * // pass parameters at call time\n * // use when some parameters are only known at call time\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const approve = event => mutate({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: {\n *             id: event.target.dataset.id,\n *             data: { isApproved: true, updatedAt: new Date() }\n *         },\n *     });\n *     return <Button\n *         label=\"Approve\"\n *         onClick={approve}\n *         disabled={loading}\n *     />;\n * };\n *\n * @example\n *\n * // use the second argument to pass options\n * import { useMutation, useNotify, CRUD_UPDATE } from 'react-admin';\n *\n * const ResetStockButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const notify = useNotify();\n *     const handleClick = () => mutate(\n *         {\n *              type: 'update',\n *              resource: 'items',\n *              payload: { id: record.id, data: { stock: 0 } }\n *         },\n *         {\n *              undoable: true,\n *              action: CRUD_UPDATE,\n *              onSuccess: response => notify('Success !'),\n *              onFailure: error => notify('Failure !')\n *         }\n *     );\n *     return <Button label=\"Reset stock\" onClick={handleClick} disabled={loading} />;\n * };\n */\n\nvar useMutation = function (query, options) {\n  var _a = useSafeSetState({\n    data: null,\n    error: null,\n    total: null,\n    loading: false,\n    loaded: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var dataProvider = useDataProvider();\n  var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  var mutate = useCallback(function (callTimeQuery, callTimeOptions) {\n    var finalDataProvider = hasDeclarativeSideEffectsSupport(options, callTimeOptions) ? dataProviderWithDeclarativeSideEffects : dataProvider;\n    var params = mergeDefinitionAndCallTimeParameters(query, callTimeQuery, options, callTimeOptions);\n    setState(function (prevState) {\n      return __assign(__assign({}, prevState), {\n        loading: true\n      });\n    });\n    finalDataProvider[params.type](params.resource, params.payload, params.options).then(function (_a) {\n      var data = _a.data,\n          total = _a.total;\n      setState({\n        data: data,\n        error: null,\n        loaded: true,\n        loading: false,\n        total: total\n      });\n    }).catch(function (errorFromResponse) {\n      setState({\n        data: null,\n        error: errorFromResponse,\n        loaded: false,\n        loading: false,\n        total: null\n      });\n    });\n  }, [// deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n  JSON.stringify({\n    query: query,\n    options: options\n  }), dataProvider, dataProviderWithDeclarativeSideEffects, setState]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  );\n  return [mutate, state];\n};\n/**\n * Utility function for merging parameters\n *\n * useMutation() parameters can be passed:\n * - at definition time (e.g. useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }) )\n * - at call time (e.g [mutate] = useMutation(); mutate({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }))\n * - both\n *\n * This function merges the definition time and call time parameters.\n *\n * This is useful because useMutation() is used by higher-level hooks like\n * useCreate() or useUpade(), and these hooks can be called both ways.\n * So it makes sense to make useMutation() capable of handling both call types\n * as it avoids repetition higher in the hook chain.\n *\n * Also, the call time query may be a DOM Event if the callback is used\n * as an event listener, as in:\n *\n * const UpdateButton = () => {\n *     const mutate = useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } });\n *     return <button onclick={mutate}>Click me</button>\n * };\n *\n * This usage is accepted, and therefore this function checks if the call time\n * query is an Event, and discards it in that case.\n *\n * @param query {Mutation}\n * @param callTimeQuery {Mutation}\n * @param options {Object}\n * @param callTimeOptions {Object}\n *\n * @return { type, resource, payload, options } The merged parameters\n */\n\n\nvar mergeDefinitionAndCallTimeParameters = function (query, callTimeQuery, options, callTimeOptions) {\n  if (!query && (!callTimeQuery || callTimeQuery instanceof Event)) {\n    throw new Error('Missing query either at definition or at call time');\n  }\n\n  if (callTimeQuery instanceof Event) return {\n    type: query.type,\n    resource: query.resource,\n    payload: query.payload,\n    options: sanitizeOptions(options)\n  };\n  if (query) return {\n    type: query.type || callTimeQuery.type,\n    resource: query.resource || callTimeQuery.resource,\n    payload: callTimeQuery ? merge({}, query.payload, callTimeQuery.payload) : query.payload,\n    options: callTimeOptions ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions)) : sanitizeOptions(options)\n  };\n  return {\n    type: callTimeQuery.type,\n    resource: callTimeQuery.resource,\n    payload: callTimeQuery.payload,\n    options: sanitizeOptions(callTimeOptions)\n  };\n};\n\nvar hasDeclarativeSideEffectsSupport = function (options, callTimeOptions) {\n  if (!options && !callTimeOptions) return false;\n  if (callTimeOptions && callTimeOptions.withDeclarativeSideEffectsSupport) return true;\n  if (options && options.withDeclarativeSideEffectsSupport) return true;\n  return false;\n};\n\nvar sanitizeOptions = function (args) {\n  if (!args) return {};\n\n  var withDeclarativeSideEffectsSupport = args.withDeclarativeSideEffectsSupport,\n      options = __rest(args, [\"withDeclarativeSideEffectsSupport\"]);\n\n  return options;\n};\n\nexport default useMutation;","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/useMutation.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","useCallback","merge","useSafeSetState","useDataProvider","useDataProviderWithDeclarativeSideEffects","useMutation","query","options","_a","data","error","total","loading","loaded","state","setState","dataProvider","dataProviderWithDeclarativeSideEffects","mutate","callTimeQuery","callTimeOptions","finalDataProvider","hasDeclarativeSideEffectsSupport","params","mergeDefinitionAndCallTimeParameters","prevState","type","resource","payload","then","catch","errorFromResponse","JSON","stringify","Event","Error","sanitizeOptions","withDeclarativeSideEffectsSupport","args"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useCallback } from 'react';\nimport merge from 'lodash/merge';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Get a callback to fetch the data provider through Redux, usually for mutations.\n *\n * The request starts when the callback is called.\n *\n * useMutation() parameters can be passed:\n *\n * - at definition time\n *\n *       const [mutate] = useMutation(query, options); mutate();\n *\n * - at call time\n *\n *       const [mutate] = useMutation(); mutate(query, options);\n *\n * - both, in which case the definition and call time parameters are merged\n *\n *       const [mutate] = useMutation(query1, options1); mutate(query2, options2));\n *\n * @param {Object} query\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects (e.g. { onSuccess: { refresh: true } })\n *\n * @returns A tuple with the mutation callback and the request state. Destructure as [mutate, { data, total, error, loading, loaded }].\n *\n * The return value updates according to the request state:\n *\n * - mount:         [mutate, { loading: false, loaded: false }]\n * - mutate called: [mutate, { loading: true, loaded: false }]\n * - success:       [mutate, { data: [data from response], total: [total from response], loading: false, loaded: true }]\n * - error:         [mutate, { error: [error from response], loading: false, loaded: true }]\n *\n * The mutate function accepts the following arguments\n * - {Object} query\n * - {string} query.type The method called on the data provider, e.g. 'update'\n * - {string} query.resource A resource name, e.g. 'posts', 'comments'\n * - {Object} query.payload The payload object, e.g. { id: 123, data: { isApproved: true } }\n * - {Object} options\n * - {string} options.action Redux action type\n * - {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * - {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() } }\n * - {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) } }\n * - {boolean} withDeclarativeSideEffectsSupport Set to true to support legacy side effects (e.g. { onSuccess: { refresh: true } })\n *\n * @example\n *\n * // pass parameters at definition time\n * // use when all parameters are determined at definition time\n * // the mutation callback can be used as an even handler\n * // because Event parameters are ignored\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [approve, { loading }] = useMutation({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: { id: record.id, data: { isApproved: true } }\n *     });\n *     return <Button label=\"Approve\" onClick={approve} disabled={loading} />;\n * };\n *\n * @example\n *\n * // pass parameters at call time\n * // use when some parameters are only known at call time\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const approve = event => mutate({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: {\n *             id: event.target.dataset.id,\n *             data: { isApproved: true, updatedAt: new Date() }\n *         },\n *     });\n *     return <Button\n *         label=\"Approve\"\n *         onClick={approve}\n *         disabled={loading}\n *     />;\n * };\n *\n * @example\n *\n * // use the second argument to pass options\n * import { useMutation, useNotify, CRUD_UPDATE } from 'react-admin';\n *\n * const ResetStockButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const notify = useNotify();\n *     const handleClick = () => mutate(\n *         {\n *              type: 'update',\n *              resource: 'items',\n *              payload: { id: record.id, data: { stock: 0 } }\n *         },\n *         {\n *              undoable: true,\n *              action: CRUD_UPDATE,\n *              onSuccess: response => notify('Success !'),\n *              onFailure: error => notify('Failure !')\n *         }\n *     );\n *     return <Button label=\"Reset stock\" onClick={handleClick} disabled={loading} />;\n * };\n */\nvar useMutation = function (query, options) {\n    var _a = useSafeSetState({\n        data: null,\n        error: null,\n        total: null,\n        loading: false,\n        loaded: false,\n    }), state = _a[0], setState = _a[1];\n    var dataProvider = useDataProvider();\n    var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n    /* eslint-disable react-hooks/exhaustive-deps */\n    var mutate = useCallback(function (callTimeQuery, callTimeOptions) {\n        var finalDataProvider = hasDeclarativeSideEffectsSupport(options, callTimeOptions)\n            ? dataProviderWithDeclarativeSideEffects\n            : dataProvider;\n        var params = mergeDefinitionAndCallTimeParameters(query, callTimeQuery, options, callTimeOptions);\n        setState(function (prevState) { return (__assign(__assign({}, prevState), { loading: true })); });\n        finalDataProvider[params.type](params.resource, params.payload, params.options)\n            .then(function (_a) {\n            var data = _a.data, total = _a.total;\n            setState({\n                data: data,\n                error: null,\n                loaded: true,\n                loading: false,\n                total: total,\n            });\n        })\n            .catch(function (errorFromResponse) {\n            setState({\n                data: null,\n                error: errorFromResponse,\n                loaded: false,\n                loading: false,\n                total: null,\n            });\n        });\n    }, [\n        // deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n        JSON.stringify({ query: query, options: options }),\n        dataProvider,\n        dataProviderWithDeclarativeSideEffects,\n        setState,\n    ]\n    /* eslint-enable react-hooks/exhaustive-deps */\n    );\n    return [mutate, state];\n};\n/**\n * Utility function for merging parameters\n *\n * useMutation() parameters can be passed:\n * - at definition time (e.g. useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }) )\n * - at call time (e.g [mutate] = useMutation(); mutate({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }))\n * - both\n *\n * This function merges the definition time and call time parameters.\n *\n * This is useful because useMutation() is used by higher-level hooks like\n * useCreate() or useUpade(), and these hooks can be called both ways.\n * So it makes sense to make useMutation() capable of handling both call types\n * as it avoids repetition higher in the hook chain.\n *\n * Also, the call time query may be a DOM Event if the callback is used\n * as an event listener, as in:\n *\n * const UpdateButton = () => {\n *     const mutate = useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } });\n *     return <button onclick={mutate}>Click me</button>\n * };\n *\n * This usage is accepted, and therefore this function checks if the call time\n * query is an Event, and discards it in that case.\n *\n * @param query {Mutation}\n * @param callTimeQuery {Mutation}\n * @param options {Object}\n * @param callTimeOptions {Object}\n *\n * @return { type, resource, payload, options } The merged parameters\n */\nvar mergeDefinitionAndCallTimeParameters = function (query, callTimeQuery, options, callTimeOptions) {\n    if (!query && (!callTimeQuery || callTimeQuery instanceof Event)) {\n        throw new Error('Missing query either at definition or at call time');\n    }\n    if (callTimeQuery instanceof Event)\n        return {\n            type: query.type,\n            resource: query.resource,\n            payload: query.payload,\n            options: sanitizeOptions(options),\n        };\n    if (query)\n        return {\n            type: query.type || callTimeQuery.type,\n            resource: query.resource || callTimeQuery.resource,\n            payload: callTimeQuery\n                ? merge({}, query.payload, callTimeQuery.payload)\n                : query.payload,\n            options: callTimeOptions\n                ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions))\n                : sanitizeOptions(options),\n        };\n    return {\n        type: callTimeQuery.type,\n        resource: callTimeQuery.resource,\n        payload: callTimeQuery.payload,\n        options: sanitizeOptions(callTimeOptions),\n    };\n};\nvar hasDeclarativeSideEffectsSupport = function (options, callTimeOptions) {\n    if (!options && !callTimeOptions)\n        return false;\n    if (callTimeOptions && callTimeOptions.withDeclarativeSideEffectsSupport)\n        return true;\n    if (options && options.withDeclarativeSideEffectsSupport)\n        return true;\n    return false;\n};\nvar sanitizeOptions = function (args) {\n    if (!args)\n        return {};\n    var withDeclarativeSideEffectsSupport = args.withDeclarativeSideEffectsSupport, options = __rest(args, [\"withDeclarativeSideEffectsSupport\"]);\n    return options;\n};\nexport default useMutation;\n"]},"metadata":{},"sourceType":"module"}