{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useRef, useEffect } from 'react';\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\n\nexport default function useWhyDidYouUpdate(name, props) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  var previousProps = useRef();\n  useEffect(function () {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      var allKeys = Object.keys(__assign(__assign({}, previousProps.current), props)); // Use this object to keep track of changed props\n\n      var changesObj_1 = {}; // Iterate through keys\n\n      allKeys.forEach(function (key) {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj_1[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      }); // If changesObj not empty then output to console\n\n      if (Object.keys(changesObj_1).length) {\n        console.log('[why-did-you-update]', name, changesObj_1);\n      }\n    } // Finally update previousProps with current props for next hook call\n\n\n    previousProps.current = props;\n  });\n}","map":{"version":3,"sources":["/node_modules/ra-core/esm/util/useWhyDidYouUpdate.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useRef","useEffect","useWhyDidYouUpdate","name","props","previousProps","current","allKeys","keys","changesObj_1","forEach","key","from","to","console","log"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA;;;;;;;;;;;;AAWA,eAAe,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;AACpD;AACA;AACA,MAAIC,aAAa,GAAGL,MAAM,EAA1B;AACAC,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAII,aAAa,CAACC,OAAlB,EAA2B;AACvB;AACA,UAAIC,OAAO,GAAGpB,MAAM,CAACqB,IAAP,CAAYtB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKmB,aAAa,CAACC,OAAnB,CAAT,EAAsCF,KAAtC,CAApB,CAAd,CAFuB,CAGvB;;AACA,UAAIK,YAAY,GAAG,EAAnB,CAJuB,CAKvB;;AACAF,MAAAA,OAAO,CAACG,OAAR,CAAgB,UAAUC,GAAV,EAAe;AAC3B;AACA,YAAIN,aAAa,CAACC,OAAd,CAAsBK,GAAtB,MAA+BP,KAAK,CAACO,GAAD,CAAxC,EAA+C;AAC3C;AACAF,UAAAA,YAAY,CAACE,GAAD,CAAZ,GAAoB;AAChBC,YAAAA,IAAI,EAAEP,aAAa,CAACC,OAAd,CAAsBK,GAAtB,CADU;AAEhBE,YAAAA,EAAE,EAAET,KAAK,CAACO,GAAD;AAFO,WAApB;AAIH;AACJ,OATD,EANuB,CAgBvB;;AACA,UAAIxB,MAAM,CAACqB,IAAP,CAAYC,YAAZ,EAA0Bf,MAA9B,EAAsC;AAClCoB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCZ,IAApC,EAA0CM,YAA1C;AACH;AACJ,KArBiB,CAsBlB;;;AACAJ,IAAAA,aAAa,CAACC,OAAd,GAAwBF,KAAxB;AACH,GAxBQ,CAAT;AAyBH","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useRef, useEffect } from 'react';\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\nexport default function useWhyDidYouUpdate(name, props) {\n    // Get a mutable ref object where we can store props ...\n    // ... for comparison next time this hook runs.\n    var previousProps = useRef();\n    useEffect(function () {\n        if (previousProps.current) {\n            // Get all keys from previous and current props\n            var allKeys = Object.keys(__assign(__assign({}, previousProps.current), props));\n            // Use this object to keep track of changed props\n            var changesObj_1 = {};\n            // Iterate through keys\n            allKeys.forEach(function (key) {\n                // If previous is different from current\n                if (previousProps.current[key] !== props[key]) {\n                    // Add to changesObj\n                    changesObj_1[key] = {\n                        from: previousProps.current[key],\n                        to: props[key],\n                    };\n                }\n            });\n            // If changesObj not empty then output to console\n            if (Object.keys(changesObj_1).length) {\n                console.log('[why-did-you-update]', name, changesObj_1);\n            }\n        }\n        // Finally update previousProps with current props for next hook call\n        previousProps.current = props;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}