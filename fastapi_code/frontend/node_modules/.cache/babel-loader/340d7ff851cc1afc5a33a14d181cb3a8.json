{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useFormState } from 'react-final-form';\nimport get from 'lodash/get';\nimport warning from '../util/warning';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\n\nvar FormDataConsumer = function (_a) {\n  var subscription = _a.subscription,\n      props = __rest(_a, [\"subscription\"]);\n\n  var formState = useFormState({\n    subscription: subscription\n  });\n  return React.createElement(FormDataConsumerView, __assign({\n    formData: formState.values\n  }, props));\n};\n\nexport var FormDataConsumerView = function (_a) {\n  var children = _a.children,\n      form = _a.form,\n      formData = _a.formData,\n      source = _a.source,\n      index = _a.index,\n      rest = __rest(_a, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n\n  var scopedFormData = formData;\n  var getSource;\n  var getSourceHasBeenCalled = false;\n  var ret; // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n\n  if (typeof index !== 'undefined') {\n    scopedFormData = get(formData, source);\n\n    getSource = function (scopedSource) {\n      getSourceHasBeenCalled = true;\n      return source + \".\" + scopedSource;\n    };\n\n    ret = children(__assign({\n      formData: formData,\n      scopedFormData: scopedFormData,\n      getSource: getSource\n    }, rest));\n  } else {\n    ret = children(__assign({\n      formData: formData\n    }, rest));\n  }\n\n  warning(typeof index !== 'undefined' && ret && !getSourceHasBeenCalled, \"You're using a FormDataConsumer inside an ArrayInput and you did not call the getSource function supplied by the FormDataConsumer component. This is required for your inputs to get the proper source.\\n\\n<ArrayInput source=\\\"users\\\">\\n    <SimpleFormIterator>\\n        <TextInput source=\\\"name\\\" />\\n\\n        <FormDataConsumer>\\n            {({\\n                formData, // The whole form data\\n                scopedFormData, // The data for this item of the ArrayInput\\n                getSource, // A function to get the valid source inside an ArrayInput\\n                ...rest,\\n            }) =>\\n                scopedFormData.name ? (\\n                    <SelectInput\\n                        source={getSource('role')} // Will translate to \\\"users[0].role\\\"\\n                        choices={['admin', 'user']}\\n                        {...rest}\\n                    />\\n                ) : null\\n            }\\n        </FormDataConsumer>\\n    </SimpleFormIterator>\\n</ArrayInput>\");\n  return ret === undefined ? null : ret;\n};\nexport default FormDataConsumer;","map":{"version":3,"sources":["/node_modules/ra-core/esm/form/FormDataConsumer.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","useFormState","get","warning","FormDataConsumer","_a","subscription","props","formState","createElement","FormDataConsumerView","formData","values","children","form","source","index","rest","scopedFormData","getSource","getSourceHasBeenCalled","ret","scopedSource","undefined"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { useFormState } from 'react-final-form';\nimport get from 'lodash/get';\nimport warning from '../util/warning';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nvar FormDataConsumer = function (_a) {\n    var subscription = _a.subscription, props = __rest(_a, [\"subscription\"]);\n    var formState = useFormState({ subscription: subscription });\n    return React.createElement(FormDataConsumerView, __assign({ formData: formState.values }, props));\n};\nexport var FormDataConsumerView = function (_a) {\n    var children = _a.children, form = _a.form, formData = _a.formData, source = _a.source, index = _a.index, rest = __rest(_a, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n    var scopedFormData = formData;\n    var getSource;\n    var getSourceHasBeenCalled = false;\n    var ret;\n    // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n    if (typeof index !== 'undefined') {\n        scopedFormData = get(formData, source);\n        getSource = function (scopedSource) {\n            getSourceHasBeenCalled = true;\n            return source + \".\" + scopedSource;\n        };\n        ret = children(__assign({ formData: formData, scopedFormData: scopedFormData, getSource: getSource }, rest));\n    }\n    else {\n        ret = children(__assign({ formData: formData }, rest));\n    }\n    warning(typeof index !== 'undefined' && ret && !getSourceHasBeenCalled, \"You're using a FormDataConsumer inside an ArrayInput and you did not call the getSource function supplied by the FormDataConsumer component. This is required for your inputs to get the proper source.\\n\\n<ArrayInput source=\\\"users\\\">\\n    <SimpleFormIterator>\\n        <TextInput source=\\\"name\\\" />\\n\\n        <FormDataConsumer>\\n            {({\\n                formData, // The whole form data\\n                scopedFormData, // The data for this item of the ArrayInput\\n                getSource, // A function to get the valid source inside an ArrayInput\\n                ...rest,\\n            }) =>\\n                scopedFormData.name ? (\\n                    <SelectInput\\n                        source={getSource('role')} // Will translate to \\\"users[0].role\\\"\\n                        choices={['admin', 'user']}\\n                        {...rest}\\n                    />\\n                ) : null\\n            }\\n        </FormDataConsumer>\\n    </SimpleFormIterator>\\n</ArrayInput>\");\n    return ret === undefined ? null : ret;\n};\nexport default FormDataConsumer;\n"]},"metadata":{},"sourceType":"module"}