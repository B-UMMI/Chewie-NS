{"ast":null,"code":"import { getStatusForInput as getDataStatus } from './referenceDataStatus';\nimport useTranslate from '../../i18n/useTranslate';\nimport useReference from '../useReference';\nimport useGetMatchingReferences from './useGetMatchingReferences';\nimport usePaginationState from '../usePaginationState';\nimport { useSortState } from '..';\nimport useFilterState from '../useFilterState';\n\nvar defaultReferenceSource = function (resource, source) {\n  return resource + \"@\" + source;\n};\n\nvar defaultFilter = {};\n/**\n * A hook for choosing a reference record. Useful for foreign keys.\n *\n * This hook fetches the possible values in the reference resource\n * (using `dataProvider.getMatching()`), it returns the possible choices\n * as the `choices` attribute.\n *\n * @example\n * const {\n *      choices, // the available reference resource\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n * });\n *\n * The hook also allow to filter results. It returns a `setFilter`\n * function. It uses the value to create a filter\n * for the query - by default { q: [searchText] }. You can customize the mapping\n * searchText => searchQuery by setting a custom `filterToQuery` function option\n * You can also add a permanentFilter to further filter the result:\n *\n * @example\n * const {\n *      choices, // the available reference resource\n *      setFilter,\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n *      permanentFilter: {\n *          author: 'john'\n *      },\n *      filterToQuery: searchText => ({ title: searchText })\n * });\n */\n\nvar useReferenceInputController = function (_a) {\n  var input = _a.input,\n      _b = _a.perPage,\n      perPage = _b === void 0 ? 25 : _b,\n      _c = _a.filter,\n      filter = _c === void 0 ? defaultFilter : _c,\n      reference = _a.reference,\n      filterToQuery = _a.filterToQuery,\n      _d = _a.referenceSource,\n      referenceSource = _d === void 0 ? defaultReferenceSource : _d,\n      resource = _a.resource,\n      sortOverride = _a.sort,\n      source = _a.source;\n  var translate = useTranslate();\n\n  var _e = usePaginationState({\n    perPage: perPage\n  }),\n      pagination = _e.pagination,\n      setPagination = _e.setPagination;\n\n  var _f = useSortState(sortOverride),\n      sort = _f.sort,\n      setSort = _f.setSort;\n\n  var _g = useFilterState({\n    permanentFilter: filter,\n    filterToQuery: filterToQuery\n  }),\n      filterValue = _g.filter,\n      setFilter = _g.setFilter;\n\n  var matchingReferences = useGetMatchingReferences({\n    reference: reference,\n    referenceSource: referenceSource,\n    filter: filterValue,\n    pagination: pagination,\n    sort: sort,\n    resource: resource,\n    source: source,\n    id: input.value\n  }).matchingReferences;\n  var referenceRecord = useReference({\n    id: input.value,\n    reference: reference\n  }).referenceRecord;\n  var dataStatus = getDataStatus({\n    input: input,\n    matchingReferences: matchingReferences,\n    referenceRecord: referenceRecord,\n    translate: translate\n  });\n  return {\n    choices: dataStatus.choices,\n    error: dataStatus.error,\n    loading: dataStatus.waiting,\n    filter: filterValue,\n    setFilter: setFilter,\n    pagination: pagination,\n    setPagination: setPagination,\n    sort: sort,\n    setSort: setSort,\n    warning: dataStatus.warning\n  };\n};\n\nexport default useReferenceInputController;","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/input/useReferenceInputController.js"],"names":["getStatusForInput","getDataStatus","useTranslate","useReference","useGetMatchingReferences","usePaginationState","useSortState","useFilterState","defaultReferenceSource","resource","source","defaultFilter","useReferenceInputController","_a","input","_b","perPage","_c","filter","reference","filterToQuery","_d","referenceSource","sortOverride","sort","translate","_e","pagination","setPagination","_f","setSort","_g","permanentFilter","filterValue","setFilter","matchingReferences","id","value","referenceRecord","dataStatus","choices","error","loading","waiting","warning"],"mappings":"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","sourcesContent":["import { getStatusForInput as getDataStatus } from './referenceDataStatus';\nimport useTranslate from '../../i18n/useTranslate';\nimport useReference from '../useReference';\nimport useGetMatchingReferences from './useGetMatchingReferences';\nimport usePaginationState from '../usePaginationState';\nimport { useSortState } from '..';\nimport useFilterState from '../useFilterState';\nvar defaultReferenceSource = function (resource, source) {\n    return resource + \"@\" + source;\n};\nvar defaultFilter = {};\n/**\n * A hook for choosing a reference record. Useful for foreign keys.\n *\n * This hook fetches the possible values in the reference resource\n * (using `dataProvider.getMatching()`), it returns the possible choices\n * as the `choices` attribute.\n *\n * @example\n * const {\n *      choices, // the available reference resource\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n * });\n *\n * The hook also allow to filter results. It returns a `setFilter`\n * function. It uses the value to create a filter\n * for the query - by default { q: [searchText] }. You can customize the mapping\n * searchText => searchQuery by setting a custom `filterToQuery` function option\n * You can also add a permanentFilter to further filter the result:\n *\n * @example\n * const {\n *      choices, // the available reference resource\n *      setFilter,\n * } = useReferenceInputController({\n *      input, // the input props\n *      resource: 'comments',\n *      reference: 'posts',\n *      source: 'post_id',\n *      permanentFilter: {\n *          author: 'john'\n *      },\n *      filterToQuery: searchText => ({ title: searchText })\n * });\n */\nvar useReferenceInputController = function (_a) {\n    var input = _a.input, _b = _a.perPage, perPage = _b === void 0 ? 25 : _b, _c = _a.filter, filter = _c === void 0 ? defaultFilter : _c, reference = _a.reference, filterToQuery = _a.filterToQuery, _d = _a.referenceSource, referenceSource = _d === void 0 ? defaultReferenceSource : _d, resource = _a.resource, sortOverride = _a.sort, source = _a.source;\n    var translate = useTranslate();\n    var _e = usePaginationState({ perPage: perPage }), pagination = _e.pagination, setPagination = _e.setPagination;\n    var _f = useSortState(sortOverride), sort = _f.sort, setSort = _f.setSort;\n    var _g = useFilterState({\n        permanentFilter: filter,\n        filterToQuery: filterToQuery,\n    }), filterValue = _g.filter, setFilter = _g.setFilter;\n    var matchingReferences = useGetMatchingReferences({\n        reference: reference,\n        referenceSource: referenceSource,\n        filter: filterValue,\n        pagination: pagination,\n        sort: sort,\n        resource: resource,\n        source: source,\n        id: input.value,\n    }).matchingReferences;\n    var referenceRecord = useReference({\n        id: input.value,\n        reference: reference,\n    }).referenceRecord;\n    var dataStatus = getDataStatus({\n        input: input,\n        matchingReferences: matchingReferences,\n        referenceRecord: referenceRecord,\n        translate: translate,\n    });\n    return {\n        choices: dataStatus.choices,\n        error: dataStatus.error,\n        loading: dataStatus.waiting,\n        filter: filterValue,\n        setFilter: setFilter,\n        pagination: pagination,\n        setPagination: setPagination,\n        sort: sort,\n        setSort: setSort,\n        warning: dataStatus.warning,\n    };\n};\nexport default useReferenceInputController;\n"]},"metadata":{},"sourceType":"module"}