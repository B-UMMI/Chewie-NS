{"ast":null,"code":"import decodeJwt from 'jwt-decode';\nexport const isAuthenticated = () => {\n  const permissions = localStorage.getItem('permissions');\n\n  if (!permissions) {\n    return false;\n  }\n\n  return permissions === 'user' || permissions === 'admin' ? true : false;\n};\n/**\n * Login to backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\n\nexport const login = async (email, password) => {\n  // Assert email or password is not empty\n  if (!(email.length > 0) || !(password.length > 0)) {\n    throw new Error('Email or password was not provided');\n  }\n\n  const formData = new FormData(); // OAuth2 expects form data, not JSON data\n\n  formData.append('username', email);\n  formData.append('password', password);\n  const request = new Request('/api/token', {\n    method: 'POST',\n    body: formData\n  });\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\n/**\n * Sign up via backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\n\nexport const signUp = async (email, password, passwordConfirmation) => {\n  // Assert email or password or password confirmation is not empty\n  if (!(email.length > 0)) {\n    throw new Error('Email was not provided');\n  }\n\n  if (!(password.length > 0)) {\n    throw new Error('Password was not provided');\n  }\n\n  if (!(passwordConfirmation.length > 0)) {\n    throw new Error('Password confirmation was not provided');\n  }\n\n  const formData = new FormData(); // OAuth2 expects form data, not JSON data\n\n  formData.append('username', email);\n  formData.append('password', password);\n  const request = new Request('/api/signup', {\n    method: 'POST',\n    body: formData\n  });\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('permissions');\n};","map":{"version":3,"sources":["/app/src/utils/auth.ts"],"names":["decodeJwt","isAuthenticated","permissions","localStorage","getItem","login","email","password","length","Error","formData","FormData","append","request","Request","method","body","response","fetch","status","data","json","detail","decodedToken","setItem","signUp","passwordConfirmation","logout","removeItem"],"mappings":"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","sourcesContent":["import decodeJwt from 'jwt-decode';\n\nexport const isAuthenticated = () => {\n  const permissions = localStorage.getItem('permissions');\n  if (!permissions) {\n    return false;\n  }\n  return permissions === 'user' || permissions === 'admin' ? true : false;\n};\n\n/**\n * Login to backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const login = async (email: string, password: string) => {\n  // Assert email or password is not empty\n  if (!(email.length > 0) || !(password.length > 0)) {\n    throw new Error('Email or password was not provided');\n  }\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n\n  const request = new Request('/api/token', {\n    method: 'POST',\n    body: formData,\n  });\n\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken: any = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\n\n/**\n * Sign up via backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const signUp = async (\n  email: string,\n  password: string,\n  passwordConfirmation: string\n) => {\n  // Assert email or password or password confirmation is not empty\n  if (!(email.length > 0)) {\n    throw new Error('Email was not provided');\n  }\n  if (!(password.length > 0)) {\n    throw new Error('Password was not provided');\n  }\n  if (!(passwordConfirmation.length > 0)) {\n    throw new Error('Password confirmation was not provided');\n  }\n\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n\n  const request = new Request('/api/signup', {\n    method: 'POST',\n    body: formData,\n  });\n\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken: any = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\n\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('permissions');\n};\n"]},"metadata":{},"sourceType":"module"}