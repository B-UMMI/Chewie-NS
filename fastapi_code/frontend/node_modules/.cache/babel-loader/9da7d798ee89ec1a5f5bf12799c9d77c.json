{"ast":null,"code":"import { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY } from '../core';\n\nvar defaultDataProvider = function () {\n  return Promise.resolve();\n};\n\ndefaultDataProvider.create = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.delete = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.deleteMany = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getList = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getMany = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getManyReference = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getOne = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.update = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.updateMany = function () {\n  return Promise.resolve(null);\n};\n\nvar fetchMap = {\n  create: CREATE,\n  delete: DELETE,\n  deleteMany: DELETE_MANY,\n  getList: GET_LIST,\n  getMany: GET_MANY,\n  getManyReference: GET_MANY_REFERENCE,\n  getOne: GET_ONE,\n  update: UPDATE,\n  updateMany: UPDATE_MANY\n};\n/**\n * Turn a function-based dataProvider to an object-based one\n *\n * Allows using legacy dataProviders transparently.\n *\n * @param {Function} legacyDataProvider A legacy dataProvider (type, resource, params) => Promise<any>\n *\n * @returns {Object} A dataProvider that react-admin can use\n */\n\nvar convertLegacyDataProvider = function (legacyDataProvider) {\n  var proxy = new Proxy(defaultDataProvider, {\n    get: function (_, name) {\n      return function (resource, params) {\n        if (Object.keys(fetchMap).includes(name.toString())) {\n          var fetchType = fetchMap[name.toString()];\n          return legacyDataProvider(fetchType, resource, params);\n        }\n\n        return legacyDataProvider(name.toString(), resource, params);\n      };\n    },\n    apply: function (_, __, args) {\n      return legacyDataProvider.apply(legacyDataProvider, args);\n    }\n  });\n  return proxy;\n};\n\nexport default convertLegacyDataProvider;","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/convertLegacyDataProvider.js"],"names":["CREATE","DELETE","DELETE_MANY","GET_LIST","GET_MANY","GET_MANY_REFERENCE","GET_ONE","UPDATE","UPDATE_MANY","defaultDataProvider","Promise","resolve","create","delete","deleteMany","getList","getMany","getManyReference","getOne","update","updateMany","fetchMap","convertLegacyDataProvider","legacyDataProvider","proxy","Proxy","get","_","name","resource","params","Object","keys","includes","toString","fetchType","apply","__","args"],"mappings":"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","sourcesContent":["import { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY, } from '../core';\nvar defaultDataProvider = function () { return Promise.resolve(); };\ndefaultDataProvider.create = function () { return Promise.resolve(null); };\ndefaultDataProvider.delete = function () { return Promise.resolve(null); };\ndefaultDataProvider.deleteMany = function () { return Promise.resolve(null); };\ndefaultDataProvider.getList = function () { return Promise.resolve(null); };\ndefaultDataProvider.getMany = function () { return Promise.resolve(null); };\ndefaultDataProvider.getManyReference = function () { return Promise.resolve(null); };\ndefaultDataProvider.getOne = function () { return Promise.resolve(null); };\ndefaultDataProvider.update = function () { return Promise.resolve(null); };\ndefaultDataProvider.updateMany = function () { return Promise.resolve(null); };\nvar fetchMap = {\n    create: CREATE,\n    delete: DELETE,\n    deleteMany: DELETE_MANY,\n    getList: GET_LIST,\n    getMany: GET_MANY,\n    getManyReference: GET_MANY_REFERENCE,\n    getOne: GET_ONE,\n    update: UPDATE,\n    updateMany: UPDATE_MANY,\n};\n/**\n * Turn a function-based dataProvider to an object-based one\n *\n * Allows using legacy dataProviders transparently.\n *\n * @param {Function} legacyDataProvider A legacy dataProvider (type, resource, params) => Promise<any>\n *\n * @returns {Object} A dataProvider that react-admin can use\n */\nvar convertLegacyDataProvider = function (legacyDataProvider) {\n    var proxy = new Proxy(defaultDataProvider, {\n        get: function (_, name) {\n            return function (resource, params) {\n                if (Object.keys(fetchMap).includes(name.toString())) {\n                    var fetchType = fetchMap[name.toString()];\n                    return legacyDataProvider(fetchType, resource, params);\n                }\n                return legacyDataProvider(name.toString(), resource, params);\n            };\n        },\n        apply: function (_, __, args) {\n            return legacyDataProvider.apply(legacyDataProvider, args);\n        },\n    });\n    return proxy;\n};\nexport default convertLegacyDataProvider;\n"]},"metadata":{},"sourceType":"module"}