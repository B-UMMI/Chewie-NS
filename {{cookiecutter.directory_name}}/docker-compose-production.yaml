version: "3.7"
services:
  flask_app:
    build: .
    container_name: flask_app
    ports:
      - "{{cookiecutter.flask_app_local_port}}:5000"
    volumes:
      - .:/app
      - ./pre-computed-data:/app/pre-computed-data
      - ./schema_insertion_temp:/app/schema_insertion_temp
      - ./compressed_schemas:/app/compressed_schemas
      - ./prodigal_training_files:/app/prodigal_training_files
      - ./log_files:/app/log_files
    environment:
      - FLASK_ENV=development
      - BASE_URL={{cookiecutter.base_url}}
      - DEFAULTHGRAPH=http://localhost:8890/chewiens
      - LOCAL_SPARQL=http://172.19.1.3:8890/sparql
      - URL_SEND_LOCAL_VIRTUOSO=http://172.19.1.3:8890/DAV/test_folder/data
    #  - CELERY_BROKER_URL=redis://172.19.1.4:6379/0
    #  - CELERY_RESULT_BACKEND=redis://172.19.1.4:6379/0
    networks:
      test:
        ipv4_address: 172.19.1.1
    depends_on:
      - redis
      - postgres_compose
      - virtuoso
    #restart: always

  postgres_compose:
    image: postgres:10
    container_name: "postgres"
    # Setup the username, password, and database name.
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=ref_ns_sec
    # Maps port 54320 (localhost) to port 5432 on the container.
    ports:
      - "{{cookiecutter.postgres_local_port}}:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      test:
        ipv4_address: 172.19.1.2

  pgadmin4:
    image: dpage/pgadmin4:4.26
    restart: always
    container_name: "pgadmin4"
    environment:
      PGADMIN_DEFAULT_EMAIL: "{{cookiecutter.pgadmin_email}}"
      PGADMIN_DEFAULT_PASSWORD: "{{cookiecutter.pgadmin_password}}"
    ports:
      - "{{cookiecutter.pgadmin_local_port}}:80"
    depends_on:
      - postgres_compose
    volumes:
      - pgadmin:/pgadmin4/pgadmin
    networks:
      test:

  virtuoso:
    image: openlink/virtuoso-opensource-7:7.2.6-r3-g1b16668
    container_name: virtuoso
    environment:
      #- SPARQL_UPDATE=true
      - VIRTUOSO_DB_USER=demo
      - VIRTUOSO_DB_PASSWORD=chewiens
      - DEFAULT_GRAPH=http://localhost:8890/chewiens
      - DBA_PASSWORD=ummi
      - DAV_PASSWORD=ummi
      #- LOG_FILE_LOCATION=/var/lib/virtuoso-opensource-6.1/db/
      #- VIRTUOSO_INI_FILE=./virtuoso.ini
    volumes:
      # This volume contains the virtuoso database (virtuoso.db)
      - ./virtuoso_data/db:/opt/virtuoso-opensource/database

      # This volume contains a file with a SQL query.
      # This query will give permission to perform updates through SPARQL.
      - ./virtuoso_data/sql_query.sql:/opt/virtuoso-opensource/initdb.d/sql_query.sql
    ports:
      - "{{cookiecutter.virtuoso_local_port}}:8890"
      - "{{cookiecutter.virtuoso_isql_local_port}}:1111"
    networks:
      test:
        ipv4_address: 172.19.1.3

  redis:
    image: redis:5.0.6
    container_name: redis
    volumes:
      - ./redis_data:/data
    ports:
      - "{{cookiecutter.redis_local_port}}:6379"
    networks:
      test:
        ipv4_address: 172.19.1.4

  flower_container:
    image: mher/flower:0.9.4
    container_name: flower_container
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_URL_PREFIX=flower
      - FLOWER_PORT=5555
    ports:
      - "{{cookiecutter.flower_local_port}}:5555"
    depends_on:
      - "redis"
    volumes:
      - flower:/usr/local/lib/python3.8/site-packages/flower
    networks:
      test:

  loci_worker:
    build:
      context: .
      dockerfile: CELERY
    container_name: loci_worker
    command: sh -c "celery -A app.api.routes worker -l info -Q loci_queue -c 1"
    volumes:
      - .:/app
    links:
      - redis
    depends_on:
      - redis
    networks:
      - test

  alleles_worker:
    build:
      context: .
      dockerfile: CELERY
    container_name: alleles_worker
    command: sh -c "celery -A app.api.routes worker -l info -Q alleles_queue -c 1"
    volumes:
      - .:/app
    links:
      - redis
    depends_on:
      - redis
    networks:
      - test

  sync_worker:
    build:
      context: .
      dockerfile: CELERY
    container_name: sync_worker
    command: sh -c "celery -A app.api.routes worker -l info -Q sync_queue -c 1"
    volumes:
      - .:/app
    links:
      - redis
    depends_on:
      - redis
    networks:
      - test

  periodic_worker:
    build:
      context: .
      dockerfile: CELERY
    container_name: periodic_worker
    environment:
      - BASE_URL={{cookiecutter.base_url}}
      - DEFAULTHGRAPH=http://localhost:8890/chewiens
      - LOCAL_SPARQL=http://172.19.1.3:8890/sparql
      - CELERY_BROKER_URL=redis://172.19.1.4:6379/0
      - CELERY_RESULT_BACKEND=redis://172.19.1.4:6379/0
    command: sh -c "celery -A periodic_jobs worker -B -Q periodic_queue -l info -c 1"
    volumes:
      - .:/app
    links:
      - redis
    depends_on:
      - redis
    networks:
      - test

  ## Production
  nginx_react:
    build:
      context: ./frontend_react/chewie_ns
      dockerfile: Dockerfile.prod
    container_name: nginx
    volumes:
      - ./self_certs:/etc/nginx/certs
      - ./compressed_schemas:/var/www/my-app/compressed_schemas
      - ./prodigal_training_files:/var/www/my-app/prodigal_training_files
      - ./frontend_react/chewie_ns/certs-data/:/data/letsencrypt/
    ports:
      # - "80:80"
      - "443:443"
    depends_on:
      - flask_app
    restart: always
    networks:
      test:
        ipv4_address: 172.19.1.5

networks:
  test:
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/16

volumes:
  pgadmin:
  flower:
